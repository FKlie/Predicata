  
  [1X4 [33X[0;0YUsing Predicata[133X[101X
  
  [33X[0;0YThe  Presburger  arithmetic, named after M. Presburger [Pre29] (translation:
  [Sta84]),  is  the  first-order  theory  of  natural  numbers  with a binary
  operation  called  addition.  In 1929, M. Presburger proved the completeness
  and  due  to  the  constructive  proof also the decidability with quantifier
  elimination.  In  this  package  the concepts of automata theory are used to
  decide Presburger arithmetic [BÃ¼c60].[133X
  
  
  [1X4.1 [33X[0;0YCreating Predicata from first-order formulas[133X[101X
  
  [1X4.1-1 PredicataGrammar[101X
  
  [33X[1;0Y[29X[2XPredicataGrammar[102X(  ) [32X function[133X
  
  [33X[0;0YThe  function [10XPredicataGrammar[110X returns the accepted grammar which is allowed
  as an input for [2XPredicataFormula[102X ([14X3.1-4[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataGrammar();[127X[104X
    [4X[28XThe accepted grammar is defined as follows:[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <formula>   ::= ( <formula> )[128X[104X
    [4X[28X                | ( <quantifier> <var> : <formula> )[128X[104X
    [4X[28X                | <formula> <logicconnective> <formula>[128X[104X
    [4X[28X                | not <formula>[128X[104X
    [4X[28X                | <term> = <term>[128X[104X
    [4X[28X                | <var> <compare> <var>[128X[104X
    [4X[28X                | <var> <compare> <int>[128X[104X
    [4X[28X                | <int> <compare> <var>[128X[104X
    [4X[28X                | <predicate> [ <varlist> ][128X[104X
    [4X[28X                | <predicate>[128X[104X
    [4X[28X                | <boolean>[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <term>      ::= ( <term> )[128X[104X
    [4X[28X                | <term> + <term>[128X[104X
    [4X[28X                | <int> * <var>[128X[104X
    [4X[28X                | ( - <int> ) * <var>[128X[104X
    [4X[28X                | <var>[128X[104X
    [4X[28X                | <int>[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <varlist>   ::= <var> , <varlist> | <var>[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <quantifier>::= A | E[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <logicconnective>::= and | or | implies | equiv [128X[104X
    [4X[28X[128X[104X
    [4X[28X  <compare>   ::= < | <= | => | > | less | leq | geq | gr[128X[104X
    [4X[28X[128X[104X
    [4X[28X  <var>       ::= a | b | c | ... | x | y | z | a1 | ... | z1 | ... [128X[104X
    [4X[28X[128X[104X
    [4X[28X  <int>       ::= 0 | 1 | 2 | 3 | 4 | ... [128X[104X
    [4X[28X[128X[104X
    [4X[28X  <boolean>   ::= true | false [128X[104X
    [4X[28X[128X[104X
    [4X[28X  <predicate> ::= P | Predicate1 | ... ; any name that isn't used above[128X[104X
  [4X[32X[104X
  
  [1X4.1-2 PredicataPredefinedPredicates[101X
  
  [33X[1;0Y[29X[2XPredicataPredefinedPredicates[102X(  ) [32X function[133X
  
  [33X[0;0YThe   function   [10XPredicataPredefinedPredicates()[110X   returns   the  predefined
  predicates which are allowed as an input for [2XPredicataFormula[102X ([14X3.1-4[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataPredefinedPredicates();[127X[104X
    [4X[28XPredefined predicates:[128X[104X
    [4X[28X  * Buechi[x,y]: V_2(x)=y, where the function V_2(x) returns [128X[104X
    [4X[28X		           the highest power of 2 dividing x.[128X[104X
    [4X[28X  * Power[x]   : V_2(x)=x[128X[104X
  [4X[32X[104X
  
  [1X4.1-3 Predicaton[101X
  
  [33X[1;0Y[29X[2XPredicaton[102X( [3Xf[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XPredicaton[110X  with  a  [10XPredicataFormula[110X  [3Xf[103X  as  an argument calls
  [2XPredicataFormulaToPredicaton[102X ([14X3.4-1[114X) and returns a minimal [10XPredicaton[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("2*x = y");[127X[104X
    [4X[28X< PredicataFormula: 2 * x = y >[128X[104X
    [4X[25Xgap>[125X [27XPredicaton(f);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 0 ][ 1, 1 ]*[ 0, 1 ]U[ 0, 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-4 Predicaton[101X
  
  [33X[1;0Y[29X[2XPredicaton[102X( [3Xf[103X, [3XV[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XPredicaton[110X  with  a [10XPredicataFormula[110X [3Xf[103X and a variable list [3XV[103X as
  arguments  calls  [2XPredicataFormulaToPredicaton[102X ([14X3.4-1[114X) and returns a minimal
  [10XPredicaton[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("2*x = y");[127X[104X
    [4X[28X< PredicataFormula: 2 * x = y >[128X[104X
    [4X[25Xgap>[125X [27XPredicaton(f, [ "y", "x" ]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "y", "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0, 1 ][ 1, 1 ]*[ 1, 0 ]U[ 0, 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-5 Predicaton[101X
  
  [33X[1;0Y[29X[2XPredicaton[102X( [3XS[103X ) [32X method[133X
  
  [33X[0;0YThe   method   [10XPredicaton[110X   with   a   [10XString[110X   [3XS[103X   as   an  argument  calls
  [2XStringToPredicaton[102X ([14X3.4-2[114X) and returns a minimal [10XPredicaton[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicaton("(E y: x+y = z and x = y)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 0 ][ 1, 1 ]*[ 0, 1 ]U[ 0, 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-6 Predicaton[101X
  
  [33X[1;0Y[29X[2XPredicaton[102X( [3XS[103X, [3XV[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XPredicaton[110X  with  a [10XString[110X [3XS[103X and a variable list [3XV[103X as arguments
  calls [2XStringToPredicaton[102X ([14X3.4-2[114X) and returns a minimal [10XPredicaton[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicaton("(E y: x+y = z and x = y)", [ "z", "x" ]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 3 states,[128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "z", "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0, 1 ][ 1, 1 ]*[ 1, 0 ]U[ 0, 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-7 VariableListOfPredicaton[101X
  
  [33X[1;0Y[29X[2XVariableListOfPredicaton[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XVariableListOfPredicaton[110X  returns  the  variable  list  of  a
  [10XPredicaton[110X   [3XP[103X   containing   variable  strings  (see  [2XPredicataIsStringType[102X
  ([14X3.1-2[114X)).  Note  that  only the functions mentioned in this section preserve
  the  variable  list, since for the resizeable [10XPredicata[110X there are no reasons
  to  implement  it.  There  the  variable  position list may be increased but
  there's  no  information on how to increase the variable list, which usually
  will be eliminated again.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("u3+2 = z5");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  3  2  2  4  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  3  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  2  4  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  2  4  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "u3", "z5" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0, 0 ]U[ 1, 1 ])[ 1, 0 ]*[ 0, 1 ]([ 0, 0 ]U[ 1, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
    [4X[25Xgap>[125X [27XVariableListOfPredicaton(P);[127X[104X
    [4X[28X[ "u3", "z5" ][128X[104X
  [4X[32X[104X
  
  [1X4.1-8 SetVariableListOfPredicaton[101X
  
  [33X[1;0Y[29X[2XSetVariableListOfPredicaton[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XSetVariableListOfPredicaton[110X  substitutes  the  variables of a
  [10XPredicaton[110X [3XP[103X with a new unique variables [3XV[103X. Here only the variable names are
  changed,  compare with [2XVariableAdjustedPredicaton[102X ([14X4.1-9[114X) where the position
  of the variables, i.e. the variable position list is permuted.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("x+y = z");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 1, 0 ]([ 1, 0, 0 ]U[ 0, 1, 0 ]U[ 1, 1, 1 ])*[128X[104X
    [4X[28X    [ 0, 0, 1 ]U[ 0, 0, 0 ]U[ 1, 0, 1 ]U[ 0, 1, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XSetVariableListOfPredicaton(P, [ "z", "y", "x" ]);[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "z", "y", "x" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-9 VariableAdjustedPredicaton[101X
  
  [33X[1;0Y[29X[2XVariableAdjustedPredicaton[102X( [3XP[103X, [3XV[103X ) [32X function[133X
  
  [33X[0;0YThe  function [10XVariableAdjustedPredicaton[110X takes a [10XPredicaton[110X [3XP[103X and a permuted
  variable  list  [3XV[103X and returns the alphabet-permuted [10XPredicaton[110X corresponding
  to  the  old  and  the  new  variable  list,  each variable position of each
  variable  may  be  changed.  For [22Xx+y = z[122X with [10X[ "x", "y", "z" ][110X the function
  [2XSetVariableListOfPredicaton[102X  ([14X4.1-8[114X) with [10X[ "z", "y", "x" ][110X will change this
  to  [22Xz+y  =  x[122X  but keep the automaton the same. Instead this function called
  with  [10X[  "z",  "y", "x" ][110X won't change the formula [22Xx+y = z[122X (with [10X[ "x", "y",
  "z"  ][110X) but instead changes the alphabet and the variable position list such
  that  the  variable  [10X"x"[110X  is  set  to the third position, [10X"y"[110X remains at the
  second  position  and  [10X"z"[110X  is  set  to  the  first  position.  Compare with
  [2XPermutedAlphabetPredicaton[102X  ([14X2.3-21[114X) and [2XSetVariablePositionListOfPredicaton[102X
  ([14X2.3-9[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("x+y = z");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 1, 0 ]([ 1, 0, 0 ]U[ 0, 1, 0 ]U[ 1, 1, 1 ])*[128X[104X
    [4X[28X    [ 0, 0, 1 ]U[ 0, 0, 0 ]U[ 1, 0, 1 ]U[ 0, 1, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XQ:=VariableAdjustedPredicaton(P, [ "z", "y", "x" ]);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(Q);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "z", "y", "x" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-10 VariableAdjustedPredicata[101X
  
  [33X[1;0Y[29X[2XVariableAdjustedPredicata[102X( [3XP1[103X, [3XP2[103X, [3XV[103X ) [32X function[133X
  
  [33X[0;0YThe     function     [10XVariableAdjustedPredicata[110X     does    the    same    as
  [2XVariableAdjustedPredicaton[102X  ([14X4.1-9[114X)  just  for two [10XPredicata[110X [3XP1[103X and [3XP2[103X and a
  variable list [3XV[103X at the same time. Required for the next functions.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("x+y = z");;[127X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("y = 4");;[127X[104X
    [4X[25Xgap>[125X [27XL:=VariableAdjustedPredicata(P1,P2, [ "x", "z", "y"]);[127X[104X
    [4X[28X[ < Predicaton: deterministic finite automaton on 8 letters [128X[104X
    [4X[28X  with 3 states and the variable position list [ 1, 2, 3 ]. >, [128X[104X
    [4X[28X  < Predicaton: deterministic finite automaton on 8 letters [128X[104X
    [4X[28X  with 5 states and the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[28X  , [ 1, 2, 3 ] ][128X[104X
    [4X[25Xgap>[125X [27XVariableListOfPredicaton(L[1]);[127X[104X
    [4X[28X[ "x", "z", "y" ][128X[104X
    [4X[25Xgap>[125X [27XVariableListOfPredicaton(L[2]);[127X[104X
    [4X[28X[ "x", "z", "y" ][128X[104X
  [4X[32X[104X
  
  [1X4.1-11 AndPredicata[101X
  
  [33X[1;0Y[29X[2XAndPredicata[102X( [3XP1[103X, [3XP2[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XAndPredicata[110X returns the intersection of the two [10XPredicata[110X [3XP1[103X
  and  [3XP2[103X  where the variable list (optional, by default [3XV[103X is the union of the
  variables  of  [3XP1[103X  and  [3XP2[103X)  defines  the  intersection and not the variable
  position. This function can be used to connect the [10XPredicata[110X of two formulas
  instead  of  calling  [10XPredicaton[110X on the two with [10Xand[110X connected formulas . In
  the  example  [22Xx+y  =  z[122X and [22Xy = 4[122X, even if the variable [10X"y"[110X doesn't have the
  same  variable  position  (in the first formula position [10X2[110X and in the second
  position [10X1[110X), will be intersected regarding the variable names.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("x+y = z");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 1, 0 ]([ 1, 0, 0 ]U[ 0, 1, 0 ]U[ 1, 1, 1 ])*[128X[104X
    [4X[28X    [ 0, 0, 1 ]U[ 0, 0, 0 ]U[ 1, 0, 1 ]U[ 0, 1, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("y = 4");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP:=AndPredicata(P1, P2, [ "x", "y", "z"]);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 6 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  6  [128X[104X
    [4X[28X------------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  2  2  2  4  5  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  3  2  2  2  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  2  2  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  2  2  3  2  2  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  2  2  1  2  2  2  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  2  2  2  4  5  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  2  2  1  2  2  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  2  2  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 6 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[25Xgap>[125X [27XQ:=Predicaton("x+y = z and y = 4", [ "x", "y", "z"]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 6 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  6  [128X[104X
    [4X[28X------------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  5  2  2  2  4  6  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  3  2  2  2  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  2  2  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  2  2  3  2  2  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  2  2  6  2  2  2  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  5  2  2  2  4  6  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  2  2  6  2  2  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  2  2  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 6 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0, 0, 0 ]U[ 1, 0, 1 ])([ 0, 0, 0 ]U[ 1, 0, 1 ])[128X[104X
    [4X[28X   ([ 1, 1, 0 ][ 1, 0, 0 ]*[ 0, 0, 1 ]U[ 0, 1, 1 ])([ 0, 0, 0 ]U[ 1, 0, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 6 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-12 OrPredicata[101X
  
  [33X[1;0Y[29X[2XOrPredicata[102X( [3XP1[103X, [3XP2[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XOrPredicata[110X  returns the union of the two [10XPredicata[110X [3XP1[103X and [3XP2[103X
  with the variable list (optional, by default [3XV[103X is the union of the variables
  of  [3XP1[103X  and  [3XP2[103X).  This function can be used to connect the [10XPredicata[110X of two
  formulas  instead  of  calling  [10XPredicaton[110X  on  the  two  with  [10Xor[110X connected
  formulas.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("u = 4");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "u" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("u = 2");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  2  4  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  4  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "u" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP:=OrPredicata(P1, P2);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  1  2  2  5  3  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  1  2  1  [128X[104X
    [4X[28X Initial states: [ 4 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "u" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-13 NotPredicaton[101X
  
  [33X[1;0Y[29X[2XNotPredicaton[102X( [3XP[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XNotPredicaton[110X  returns the negation of the [10XPredicaton[110X [3XP[103X. This
  function  can be used to negate the [10XPredicaton[110X instead of calling [10XPredicaton[110X
  on  the  formula  with prefix [10Xnot[110X. The optional parameter [3XV[103X allows to adjust
  the variable list (with [2XVariableAdjustedPredicaton[102X ([14X4.1-9[114X)).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("x < 4");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  4  4  [128X[104X
    [4X[28X  [ 1 ]  |  3  2  4  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3, 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0 ]U[ 1 ])(([ 0 ]U[ 1 ])[ 0 ]*U@)U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XNotPredicaton(P);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  4  4  [128X[104X
    [4X[28X  [ 1 ]  |  3  2  4  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 2 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-14 ImpliesPredicata[101X
  
  [33X[1;0Y[29X[2XImpliesPredicata[102X( [3XP1[103X, [3XP2[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XImpliesPredicata[110X  returns the implication of the [10XPredicata[110X [3XP1[103X
  and  [3XP2[103X  with  variable  list  (optional,  by  default [3XV[103X is the union of the
  variables  of [3XP1[103X and [3XP2[103X). This function can be used to connect the [10XPredicata[110X
  of  two  formulas  instead  of  calling  [10XPredicaton[110X  on the two with [10Ximplies[110X
  connected formulas.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("(E m: x = 4*m)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  3  3  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  3  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3, 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ]([ 0 ]([ 0 ]U[ 1 ])*U@)U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("(E n: x = 2*n)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  [128X[104X
    [4X[28X---------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ]([ 0 ]U[ 1 ])*U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP:=ImpliesPredicata(P1, P2, [ "x" ]);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 1 state, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  [128X[104X
    [4X[28X---------------[128X[104X
    [4X[28X  [ 0 ]  |  1  [128X[104X
    [4X[28X  [ 1 ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-15 EquivalentPredicata[101X
  
  [33X[1;0Y[29X[2XEquivalentPredicata[102X( [3XP1[103X, [3XP2[103X[, [3XV[103X] ) [32X function[133X
  [33X[1;0Y[29X[2XEquivPredicata[102X( [3XP1[103X, [3XP2[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe function [10XEquivalentPredicata[110X returns the equivalence of the [10XPredicata[110X [3XP1[103X
  and  [3XP2[103X  with  the variable list (optional, by default [3XV[103X is the union of the
  variables  of [3XP1[103X and [3XP2[103X). This function can be used to connect the [10XPredicata[110X
  of  two  formulas  instead  of  calling  [10XPredicaton[110X  on  the  two with [10Xequiv[110X
  connected formulas.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("(E y: 2*x = 7+3*y)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 6 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  5  2  4  3  4  6  [128X[104X
    [4X[28X  [ 1 ]  |  4  3  6  4  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 6 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   (([ 0 ][ 0 ]U[ 1 ])[ 1 ]*[ 0 ]U[ 0 ][ 1 ][ 0 ]*[ 1 ])[128X[104X
    [4X[28X    ([ 1 ][ 0 ]*[ 1 ]U[ 0 ][ 1 ]*[ 0 ])*[ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 6 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("(E k: x = 5+3*k)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 6 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  5  2  4  3  4  6  [128X[104X
    [4X[28X  [ 1 ]  |  4  3  6  4  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 6 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   (([ 0 ][ 0 ]U[ 1 ])[ 1 ]*[ 0 ]U[ 0 ][ 1 ][ 0 ]*[ 1 ])[128X[104X
    [4X[28X    ([ 1 ][ 0 ]*[ 1 ]U[ 0 ][ 1 ]*[ 0 ])*[ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 6 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP:=EquivalentPredicata(P1, P2);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 1 state, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  [128X[104X
    [4X[28X---------------[128X[104X
    [4X[28X  [ 0 ]  |  1  [128X[104X
    [4X[28X  [ 1 ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-16 ExistsPredicaton[101X
  
  [33X[1;0Y[29X[2XExistsPredicaton[102X( [3XP[103X, [3Xv[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XExistsPredicaton[110X  returns  the  existence quantifier with the
  variable  [3Xv[103X  applied  on  the  [10XPredicaton[110X  [3XP[103X.  This  function can be used to
  quantify  the  [10XPredicaton[110X  instead of calling [10X(E v: ...)[110X on the formula. The
  optional   parameter   [3XV[103X   allows   to   adjust   the  variable  list  (with
  [2XVariableAdjustedPredicaton[102X ([14X4.1-9[114X)).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("5*x+6*y = n");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 12 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  6  7  8  9  10 11 12 [128X[104X
    [4X[28X------------------------------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  2  2  3  4  5  2  7  2  2  12 2  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  1  2  2  2  3  2  7  5  2  4  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  2  2  7  2  2  2  5  2  8  9  2  12 [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  4  2  2  7  5  8  2  12 2  2  9  2  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  7  2  2  5  12 9  2  8  2  2  6  2  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  2  2  7  2  2  2  5  2  8  9  2  12 [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  2  8  2  2  2  9  2  10 11 2  6  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  12 2  2  8  9  10 2  6  2  2  11 2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n", "x", "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 12 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP:=ExistsPredicaton(P, "x");;[127X[104X
    [4X[25Xgap>[125X [27XP:=ExistsPredicaton(P, "y");;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 12 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  9  10 11 12 [128X[104X
    [4X[28X------------------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  9  2  3  2  4  5  3  7  8  2  4  11 [128X[104X
    [4X[28X  [ 1 ]  |  12 3  3  2  3  2  2  2  10 7  7  6  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3, 7, 8, 9 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
  [4X[32X[104X
  
  [1X4.1-17 ForallPredicaton[101X
  
  [33X[1;0Y[29X[2XForallPredicaton[102X( [3XP[103X, [3Xv[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XForallPredicaton[110X  returns  the  for  all  quantifier with the
  variable  [3Xv[103X  applied  on  the  [10XPredicaton[110X  [3XP[103X.  This  function can be used to
  quantify  the  [10XPredicaton[110X  instead of calling [10X(A v: ...)[110X on the formula. The
  optional   parameter   [3XV[103X   allows   to   adjust   the  variable  list  (with
  [2XVariableAdjustedPredicaton[102X ([14X4.1-9[114X)).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("(E x: (E y: 5*x+6*y = n))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 12 states,[128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  9  10 11 12 [128X[104X
    [4X[28X------------------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  12 2  4  5  2  2  5  7  9  9  10 11 [128X[104X
    [4X[28X  [ 1 ]  |  8  9  2  9  2  10 10 3  9  2  2  6  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 9, 10, 11, 12 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 12 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("n > 19");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 7 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  [128X[104X
    [4X[28X---------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  6  2  2  3  4  5  7  [128X[104X
    [4X[28X  [ 1 ]  |  6  7  2  2  3  5  7  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 7 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 7 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP3:=ImpliesPredicata(P2, P1);;[127X[104X
    [4X[25Xgap>[125X [27XP:=ForallPredicaton(P3, "n");;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
  [4X[32X[104X
  
  [1X4.1-18 LeastAcceptedNumber[101X
  
  [33X[1;0Y[29X[2XLeastAcceptedNumber[102X( [3XP[103X[, [3Xb[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XLeastAcceptedNumber[110X  returns  the  [10XPredicaton[110X recognizing the
  least  number which is accepted by the given [10XPredicaton[110X [3XP[103X. If the argument [3Xb[103X
  is  [9Xtrue[109X  (by  default),  then  the  [10XPredicaton[110X recognizing the least number
  greater [22X0[122X is returned (if there is one), otherwise [22X0[122X is included.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("x >= 4");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  2  4  [128X[104X
    [4X[28X  [ 1 ]  |  3  4  2  4  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0 ]U[ 1 ])([ 0 ]U[ 1 ])[ 0 ]*[ 1 ]([ 0 ]U[ 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XL:=LeastAcceptedNumber(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-19 GreatestAcceptedNumber[101X
  
  [33X[1;0Y[29X[2XGreatestAcceptedNumber[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XGreatestAcceptedNumber[110X returns the [10XPredicaton[110X recognizing the
  greatest number which is accepted by the given [10XPredicaton[110X [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("(E x: 2*x = y and x < 9)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 8 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  [128X[104X
    [4X[28X------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  3  2  7  4  4  5  6  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  8  2  4  4  5  5  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3, 4, 5, 6, 7, 8 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ](([ 1 ]([ 0 ]U[ 1 ])U[ 0 ]([ 0 ][ 0 ]U[ 1 ]))[128X[104X
    [4X[28X   (([ 0 ]U[ 1 ])[ 0 ]*U@)U[ 1 ]U[ 0 ]([ 0 ]([ 1 ][ 0 ]*U@)U@)U@)U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 8 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XG:=GreatestAcceptedNumber(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 7 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  [128X[104X
    [4X[28X---------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  6  2  2  3  4  5  7  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  7  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 7 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 7 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
  [4X[32X[104X
  
  [1X4.1-20 LeastNonAcceptedNumber[101X
  
  [33X[1;0Y[29X[2XLeastNonAcceptedNumber[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XLeastNonAcceptedNumber[110X returns the [10XPredicaton[110X recognizing the
  Least number which is not recognized by the given [10XPredicaton[110X [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("x < 4 or x > 8");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 7 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  [128X[104X
    [4X[28X---------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  7  2  3  3  4  4  6  [128X[104X
    [4X[28X  [ 1 ]  |  5  3  3  2  4  2  4  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 3, 4, 5, 6, 7 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0 ]([ 0 ][ 0 ]U[ 1 ])U[ 1 ]([ 0 ]U[ 1 ]))(([ 1 ][ 0 ]*[ 1 ]U[ 0 ])[128X[104X
    [4X[28X   ([ 0 ]U[ 1 ])*U@)U[ 0 ]([ 0 ]([ 1 ][ 0 ]*[ 1 ]([ 0 ]U[ 1 ])*U@)U@)U[ 1 ]U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 7 states and [128X[104X
    [4X[28Xthe variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XL:=LeastNonAcceptedNumber(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [1X4.1-21 GreatestNonAcceptedNumber[101X
  
  [33X[1;0Y[29X[2XGreatestNonAcceptedNumber[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XGreatestNonAcceptedNumber[110X  returns the [10XPredicaton[110X recognizing
  the greatest number which is not recognized by the given [10XPredicaton[110X [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("(E x: (E y: 3*x + 4*y = n))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 6 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  6  2  2  3  5  5  [128X[104X
    [4X[28X  [ 1 ]  |  4  5  2  5  5  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 5, 6 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 0 ]([ 1 ][ 0 ]*[ 1 ]U[ 0 ])U[ 1 ][ 0 ]([ 0 ]U[ 1 ])[128X[104X
    [4X[28X    [ 0 ]*[ 1 ]U[ 1 ][ 1 ])([ 0 ]U[ 1 ])*U[ 0 ]U@[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 6 states[128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XG:=GreatestNonAcceptedNumber(P);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  4  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(G);[127X[104X
    [4X[28X[ [ 5 ] ][128X[104X
  [4X[32X[104X
  
  [1X4.1-22 InterpretedPredicaton[101X
  
  [33X[1;0Y[29X[2XInterpretedPredicaton[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XInterpretedPredicaton[110X  returns  [10Xtrue[110X  if the [10XPredicaton[110X [3XP[103X has
  exactly  one  state  which  is  also  a  final state, thus the [10XPredicaton[110X is
  interpreted  as  true  (if  free  variable occurs it is true for all natural
  numbers). Otherwise, [10Xfalse[110X is returned.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=Predicaton("(A x: (E y: x = y))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is true.[128X[104X
    [4X[28X   true[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [  ]. >[128X[104X
    [4X[25Xgap>[125X [27XInterpretedPredicaton(P);[127X[104X
    [4X[28XThe Predicaton is interpreted as True.[128X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X4.1-23 AreEquivalentPredicata[101X
  
  [33X[1;0Y[29X[2XAreEquivalentPredicata[102X( [3XP1[103X, [3XP2[103X[, [3Xb[103X] ) [32X function[133X
  
  [33X[0;0YThe function [10XAreEquivalentPredicata[110X returns either [9Xtrue[109X if the [10XPredicatas[110X [3XP1[103X
  and  [3XP2[103X  are  equivalent  or [9Xfalse[109X otherwise. If the optional parameter [3Xb[103X is
  [10Xtrue[110X  (by  default)  then  the  equivalence  is computed w.r.t. the variable
  names, if [10Xfalse[110X it is computed w.r.t. to the variable position list.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP1:=Predicaton("x=4", ["x", "y"]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 5 states,[128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  5  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
    [4X[25Xgap>[125X [27XP2:=Predicaton("u=4", ["u", "v", "w"]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "u", "v", "w" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAreEquivalentPredicata(P1, P2);[127X[104X
    [4X[28XThe Predicaton doesn't hold for all natural numbers and is interpreted as False.[128X[104X
    [4X[28Xfalse[128X[104X
    [4X[25Xgap>[125X [27XAreEquivalentPredicata(P1, P2, false);[127X[104X
    [4X[28XThe Predicaton holds for all natural numbers and is interpreted as True.[128X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X4.1-24 LinearSolveOverN[101X
  
  [33X[1;0Y[29X[2XLinearSolveOverN[102X( [3XA[103X, [3Xb[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe   function   [10XLinearSolveOverN[110X  returns  the  [10XPredicaton[110X  which  language
  recognizes  the solutions [22Xx[122X of the linear equation [22XA â x = b[122X. The argument [3XA[103X
  is a matrix (list of lists), the argument [3Xb[103X a vector (list) and the optional
  argument  [3XV[103X  allows  to specify an order (here the variables are named [10X"x1",
  "x2",  ...[110X).  Note  that [3XA[103X and [3Xb[103X may contain also negative integers, whereas
  the solution is over the natural numbers.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=LinearSolveOverN([ [ 1, -2, 3 ], [ 3, 4, -7 ] ], [ 2, 0 ]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 17 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 [128X[104X
    [4X[28X---------------------------------------------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  2  2  2  2  4  2  2  2  8  2  10 2  2  2  2  2  17 [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  2  14 2  9  2  2  2  8  2  2  12 2  2  2  2  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  11 2  17 2  2  2  2  7  2  2  2  8  2  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  2  2  2  2  2  6  2  2  2  2  2  2  9  14 8  2  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  2  2  2  3  2  4  2  2  2  16 2  2  15 2  2  2  2  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  2  2  2  2  13 2  2  2  12 2  4  2  2  2  2  2  5  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  2  2  2  2  2  17 2  2  2  2  2  2  4  3  16 2  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  17 2  5  2  2  2  2  14 2  2  2  12 2  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 17 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x1", "x2", "x3" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 17 states and [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(A, 10);[127X[104X
    [4X[28X[ [ 1, 1, 1 ], [ 2, 9, 6 ] ][128X[104X
  [4X[32X[104X
  
  [1X4.1-25 NullSpaceOverN[101X
  
  [33X[1;0Y[29X[2XNullSpaceOverN[102X( [3XA[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe function [10XNullSpaceOverN[110X returns the [10XPredicaton[110X which language recognizes
  the solutions [22Xx[122X of the linear equation [22XA â x = 0[122X. The argument [3XA[103X is a matrix
  (list of lists) and the optional argument [3XV[103X allows to specify an order (here
  the  variables  are  named  [10X"x1",  "x2",  ...[110X). Note that [3XA[103X may contain also
  negative integers, whereas the solution is over the natural numbers.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XN:=NullSpaceOverN([[1, -2, 3],[3, 4, -7]]);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 8 letters with 13 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  4  5  6  7  8  9  10 11 12 13 [128X[104X
    [4X[28X---------------------------------------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  2  2  2  4  2  2  2  8  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  2  2  2  12 2  9  2  2  2  2  10 2  2  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  2  2  1  2  2  2  2  7  2  8  2  2  2  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  2  2  2  2  2  6  2  2  2  2  9  12 [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  2  2  2  3  2  4  2  2  2  2  13 2  2  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  5  2  2  2  11 2  2  2  10 2  2  2  2  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  2  2  2  2  2  2  1  2  2  2  2  4  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  2  2  5  2  2  2  2  12 2  10 2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x1", "x2", "x3" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 8 letters with 13 states and [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(N);[127X[104X
    [4X[28X[ [ 0, 0, 0 ], [ 1, 8, 5 ] ][128X[104X
  [4X[32X[104X
  
  
  [1X4.2 [33X[0;0YExamples[133X[101X
  
  
  [1X4.2-1 [33X[0;0YExample 1: Getting familiar[133X[101X
  
  [33X[0;0YThe  following  example  introduces  the  two  ways of getting a [10XPredicaton[110X,
  either  created  from  a first-order formula (see [2XPredicataGrammar[102X ([14X4.1-1[114X)),
  the  mathematically more intuitive way, or from an [10XAutomaton[110X, which at first
  sight may not completely obvious.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# We want a Predicaton accepting the binary representation of the number 4:[127X[104X
    [4X[25Xgap>[125X [27XDecToBin(4);[127X[104X
    [4X[28X[ 0, 0, 1 ][128X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton("x = 4");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27X# Accepted natural numbers?[127X[104X
    [4X[25Xgap>[125X [27XIsAcceptedByPredicaton(A, [ 4 ]);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27X# Accepted binary representation, also with leading zero?[127X[104X
    [4X[25Xgap>[125X [27XIsAcceptedByPredicaton(A, [ [ 0, 0, 1 ] ]);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XIsAcceptedByPredicaton(A, [ [ 0, 0, 1, 0 ] ]);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27X# Indeed any leading zeros can be added or cancelled:[127X[104X
    [4X[25Xgap>[125X [27XPredicatonToRatExp(A);[127X[104X
    [4X[28X[ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[25Xgap>[125X [27X# Now we create the Predicaton recognizing "y = 1" by hand:[127X[104X
    [4X[25Xgap>[125X [27X# Parameters:  type, states, alphabet, [127X[104X
    [4X[25Xgap>[125X [27XAut:=Automaton("det", 3,     [ [ 0 ], [ 1 ] ],[127X[104X
    [4X[25X>[125X [27X# transitions from letter (row) and state (column) to state (row, column)[127X[104X
    [4X[25X>[125X [27X[ [ 3, 2, 3 ], [ 2, 3, 3 ] ],[127X[104X
    [4X[25X>[125X [27X# initial state, final states[127X[104X
    [4X[25X>[125X [27X[ 1 ],          [ 2 ]);[127X[104X
    [4X[28X< deterministic automaton on 2 letters with 3 states >[128X[104X
    [4X[25Xgap>[125X [27X# We create the Predicaton from the automaton and the variable position list.[127X[104X
    [4X[25Xgap>[125X [27X# Here we choose "y" to be at position 2.[127X[104X
    [4X[25Xgap>[125X [27XB:=Predicaton(Aut, [ 2 ]); [127X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 2 ]. >[128X[104X
    [4X[25Xgap>[125X [27X# We want the Predicaton "x = 4 and y = 1", so we have to set a variable to B.[127X[104X
    [4X[25Xgap>[125X [27XSetVariableListOfPredicaton(B, [ "y" ]); [127X[104X
    [4X[25Xgap>[125X [27X# Then we use AndPredicata to apply "and" according to the variable names.[127X[104X
    [4X[25Xgap>[125X [27X# Hence the Predicaton is over the alphabet [[0, 0], [1, 0], [0, 1], [1, 1]],[127X[104X
    [4X[25Xgap>[125X [27X# where the first coordinate belong to "x" and the second to "y". Note that [127X[104X
    [4X[25Xgap>[125X [27X# [ "x", "y" ] is optional, by default it's sorted alphabetically.[127X[104X
    [4X[25Xgap>[125X [27XC:=AndPredicata(A, B, [ "x", "y" ]);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(C);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  5  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  2  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  4  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  2  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[25Xgap>[125X [27X# So C accepts in the first component of the letter the variable x [127X[104X
    [4X[25Xgap>[125X [27X# and in the second component the variable y.[127X[104X
    [4X[25Xgap>[125X [27XIsAcceptedByPredicaton(C, [ 4, 1 ]);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XIsAcceptedByPredicaton(C, [ [ 0, 0, 1 ], [ 1 ] ]);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27X# Alternatively, we could have created this Predicaton simply with[127X[104X
    [4X[25Xgap>[125X [27XD:=Predicaton("x = 4 and y = 1");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  5  [128X[104X
    [4X[28X------------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  2  2  2  3  5  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  4  2  2  2  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  2  2  2  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0, 1 ][ 0, 0 ][ 1, 0 ][ 0, 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
    [4X[25Xgap>[125X [27XDrawPredicaton(D);[127X[104X
    [4X[25Xgap>[125X [27X# Furthermore, we can use the following function to see the allowed grammar:[127X[104X
    [4X[25Xgap>[125X [27XPredicataGrammar();[127X[104X
  [4X[32X[104X
  
  
  [1X4.2-2 [33X[0;0YExample 2: Recalling the motivation[133X[101X
  
  [33X[0;0YWe  recall  the  example  from  the  section  [14X1[114X.  There we wanted to get the
  [10XPredicaton[110X  recognizing  all  natural numbers which can be purchased by 6, 9
  and 20.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# We create the Predicaton of the following formula[127X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton("(E x:(E y:(E z:6*x+9*y+20*z=n)))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 17 states,[128X[104X
    [4X[28X the variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 [128X[104X
    [4X[28X---------------------------------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  17 12 6  3  5  5  6  4  7  6  5  10 13 13 14 15 16 [128X[104X
    [4X[28X  [ 1 ]  |  2  9  13 5  13 5  3  15 10 14 14 4  13 5  5  11 8  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 13, 14, 15, 16, 17 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 17 states[128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XDisplay(A);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 17 states,[128X[104X
    [4X[28X the variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 [128X[104X
    [4X[28X---------------------------------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  17 12 6  3  5  5  6  4  7  6  5  10 13 13 14 15 16 [128X[104X
    [4X[28X  [ 1 ]  |  2  9  13 5  13 5  3  15 10 14 14 4  13 5  5  11 8  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 13, 14, 15, 16, 17 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[25Xgap>[125X [27X# We ask for the accepted natural numbers.[127X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(A, 20);[127X[104X
    [4X[28X[ [ 0 ], [ 6 ], [ 9 ], [ 12 ], [ 15 ], [ 18 ], [ 20 ] ][128X[104X
    [4X[25Xgap>[125X [27XDisplayAcceptedByPredicaton(A, 99, true);[127X[104X
    [4X[28X If the following words are accepted by the given automaton, then: Y,[128X[104X
    [4X[28X otherwise if not accepted: n.[128X[104X
    [4X[28X   0: Y   1: n   2: n   3: n   4: n   5: n   6: Y   7: n   8: n   9: Y[128X[104X
    [4X[28X  10: n  11: n  12: Y  13: n  14: n  15: Y  16: n  17: n  18: Y  19: n[128X[104X
    [4X[28X  20: Y  21: Y  22: n  23: n  24: Y  25: n  26: Y  27: Y  28: n  29: Y[128X[104X
    [4X[28X  30: Y  31: n  32: Y  33: Y  34: n  35: Y  36: Y  37: n  38: Y  39: Y[128X[104X
    [4X[28X  40: Y  41: Y  42: Y  43: n  44: Y  45: Y  46: Y  47: Y  48: Y  49: Y[128X[104X
    [4X[28X  50: Y  51: Y  52: Y  53: Y  54: Y  55: Y  56: Y  57: Y  58: Y  59: Y[128X[104X
    [4X[28X  60: Y  61: Y  62: Y  63: Y  64: Y  65: Y  66: Y  67: Y  68: Y  69: Y[128X[104X
    [4X[28X  70: Y  71: Y  72: Y  73: Y  74: Y  75: Y  76: Y  77: Y  78: Y  79: Y[128X[104X
    [4X[28X  80: Y  81: Y  82: Y  83: Y  84: Y  85: Y  86: Y  87: Y  88: Y  89: Y[128X[104X
    [4X[28X  90: Y  91: Y  92: Y  93: Y  94: Y  95: Y  96: Y  97: Y  98: Y  99: Y[128X[104X
    [4X[28X [128X[104X
    [4X[25Xgap>[125X [27X# We create the Predicaton accepting the greatest non-accepted number.[127X[104X
    [4X[25Xgap>[125X [27X# First we create a PredicatonRepresentation, containing a name,[127X[104X
    [4X[25Xgap>[125X [27X# an arity and an automaton (the input may also be a Predicaton).[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("P", 1, A);[127X[104X
    [4X[28X< Predicaton represented with the name "P", the arity 1 and [128X[104X
    [4X[28Xthe deterministic automaton on 2 letters and 17 states. >[128X[104X
    [4X[25Xgap>[125X [27XAddToPredicataList(p);[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ "P" ]. >[128X[104X
    [4X[25Xgap>[125X [27XB:=Predicaton("(A m: m > n implies P[m]) and not P[n]");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 8 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  [128X[104X
    [4X[28X------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  2  3  2  5  2  8  [128X[104X
    [4X[28X  [ 1 ]  |  7  2  8  2  4  2  6  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 8 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 1 ][ 0 ][ 1 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 8 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(B, 50);[127X[104X
    [4X[28X[ [ 43 ] ][128X[104X
    [4X[25Xgap>[125X [27X# We look at the regular expression and compute the natural number[127X[104X
    [4X[25Xgap>[125X [27XPredicatonToRatExp(B);[127X[104X
    [4X[28X[ 1 ][ 1 ][ 0 ][ 1 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[25Xgap>[125X [27XBinToDec([ 1, 1, 0, 1, 0, 1 ]);[127X[104X
    [4X[28X43[128X[104X
    [4X[25Xgap>[125X [27X# Alternatively, we can also use the inbuilt function:[127X[104X
    [4X[25Xgap>[125X [27XC:=GreatestNonAcceptedNumber(A);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 8 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  [128X[104X
    [4X[28X------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  2  3  2  5  2  8  [128X[104X
    [4X[28X  [ 1 ]  |  7  2  8  2  4  2  6  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 8 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "n" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 1 ][ 0 ][ 1 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 8 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
  [4X[32X[104X
  
  
  [1X4.2-3 [33X[0;0YExample 3: Divisible by three[133X[101X
  
  [33X[0;0YA very common example from an automata theory lecture is finding the natural
  numbers  which  are divisible by three. Sometimes this example is solve with
  clear rules, sometimes with a lot of handwaving.[133X
  
  [33X[0;0YHowever,  the  following way is a solid approach in the first-order language
  with [22X+[122X using the shortcut [10X3*x:=x+x+x[110X.[133X
  
  [33X[0;0YHere,  first  the  [10XPredicaton[110X  for [10X3*y=x[110X is created with the transition rule
  with  the  [10Xk[110X-th state having carry [10X(k-1)[110X: [10X3*a[1]=a[2]+(i-1)+2*((j-1)-(i-1))[110X.
  For  the existence quantifier we ignore the second component of each letter,
  which  yields a nondeterministic finite automaton. We apply the leading zero
  completion  (see [2XNormalizedLeadingZeroPredicaton[102X ([14X2.3-12[114X)), i.e. any leading
  zero  may  be  cancelled  or  added to the accepted words. Then we apply the
  subset construction and return the minimal automaton.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# We ask if there exists "y" s.t. 3*y=x.[127X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton("(E y: 3*y = x)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  [128X[104X
    [4X[28X---------------------[128X[104X
    [4X[28X  [ 0 ]  |  1  3  2  [128X[104X
    [4X[28X  [ 1 ]  |  2  1  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1 ]([ 0 ][ 1 ]*[ 0 ])*[ 1 ]U[ 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27X# Compare with:[127X[104X
    [4X[25Xgap>[125X [27XB:=Predicaton("3*y = x");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  2  2  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  1  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  2  4  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  2  4  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 1 ]([ 0, 1 ][ 1, 1 ]*[ 0, 0 ])*[ 1, 0 ]U[ 0, 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 4 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. >[128X[104X
    [4X[25Xgap>[125X [27XDisplay(B);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 4 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  4  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  2  2  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  1  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  2  4  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  3  2  2  4  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y" ].[128X[104X
    [4X[25Xgap>[125X [27XC:=ExistsPredicaton(B, "y");;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(C);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  [128X[104X
    [4X[28X---------------------[128X[104X
    [4X[28X  [ 0 ]  |  1  3  2  [128X[104X
    [4X[28X  [ 1 ]  |  2  1  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[25Xgap>[125X [27XDrawPredicaton(A);[127X[104X
  [4X[32X[104X
  
  
  [1X4.2-4 [33X[0;0YExample 4: Linear congruences[133X[101X
  
  [33X[0;0YWe can solve the linear congruences [22X4â x=7[122X modulo 5 in the natural numbers.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton("(E y: 4*x = 7+5*y)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  1  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  5  1  4  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states[128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(A, 20);[127X[104X
    [4X[28X[ [ 3 ], [ 8 ], [ 13 ], [ 18 ] ][128X[104X
    [4X[25Xgap>[125X [27X# We asked for some accepted words and suggest as a solution x = 3+5*k.[127X[104X
    [4X[25Xgap>[125X [27XB:=Predicaton("(E k: x = 3+5*k)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  1  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  5  1  4  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27X# Indeed:[127X[104X
    [4X[25Xgap>[125X [27XAreEquivalentPredicata(A, B);[127X[104X
    [4X[28XThe Predicaton holds for all natural numbers and is interpreted as True.[128X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XDrawPredicaton(A);[127X[104X
    [4X[25Xgap>[125X [27X# Furthermore, we look at a system of linear congruences.[127X[104X
    [4X[25Xgap>[125X [27XC:=Predicaton("(E y1: x = 1 + 2*y1) and (E y2: x = 2 + 3*y2)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  4  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  4  2  5  4  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 1 ]*[ 0 ]([ 1 ][ 0 ]*[ 1 ]U[ 0 ][ 1 ]*[ 0 ])*[ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(C, 20);[127X[104X
    [4X[28X[ [ 5 ], [ 11 ], [ 17 ] ][128X[104X
    [4X[25Xgap>[125X [27X# We suggest:[127X[104X
    [4X[25Xgap>[125X [27XD:=Predicaton("(E k: x = 5 + 6 * k)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  4  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  4  2  5  4  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 1 ]*[ 0 ]([ 1 ][ 0 ]*[ 1 ]U[ 0 ][ 1 ]*[ 0 ])*[ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAreEquivalentPredicata(C, D);[127X[104X
    [4X[28XThe Predicaton holds for all natural numbers and is interpreted as True.[128X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  
  [1X4.2-5 [33X[0;0YExample 5: GCD and LCM[133X[101X
  
  [33X[0;0YWe  can  also compute the GCD and LCM of two natural numbers, however at the
  first sight it's not completely obvious how to obtain the GCD.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# All multiples of the GCD of 6 and 15. If there exists z such that[127X[104X
    [4X[25Xgap>[125X [27X# it is a multiple of the GCD(6, 15) after some number y, then also[127X[104X
    [4X[25Xgap>[125X [27X# z+x is a multiple of the GCD.[127X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton("(E y: (A z: z>=y implies ((Ea : (Eb: z= 6*a+15*b))\[127X[104X
    [4X[25X>[125X [27Ximplies (Ec: (Ed: z+x= 6*c+15*d)))))");[127X[104X
    [4X[28X[128X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  [128X[104X
    [4X[28X---------------------[128X[104X
    [4X[28X  [ 0 ]  |  1  3  2  [128X[104X
    [4X[28X  [ 1 ]  |  2  1  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1 ]([ 0 ][ 1 ]*[ 0 ])*[ 1 ]U[ 0 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27X# This Predicaton is already known from Example 2 and we test for the least[127X[104X
    [4X[25Xgap>[125X [27X# accepted natural number greater 0 (>= 0 with optional parameter false):[127X[104X
    [4X[25Xgap>[125X [27XB:=LeastAcceptedNumber(A);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 4 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0 ]  |  2  2  2  4  [128X[104X
    [4X[28X  [ 1 ]  |  3  2  4  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 4 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 1 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 4 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(B);[127X[104X
    [4X[28X[ [ 3 ] ][128X[104X
    [4X[25Xgap>[125X [27X# We get the multiples of the LCM(6, 15) straightforwardly.[127X[104X
    [4X[25Xgap>[125X [27XC:=Predicaton("(E a: 6*a = x) and (E b: 15*b = x)");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 17 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 [128X[104X
    [4X[28X---------------------------------------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  17 2  6  3  4  5  10 7  8  9  12 11 16 13 14 15 17 [128X[104X
    [4X[28X  [ 1 ]  |  2  2  17 6  7  13 5  3  11 16 10 4  12 8  15 9  14 [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1, 17 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 17 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XD:=LeastAcceptedNumber(C);[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 2 letters with 7 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  6  7  [128X[104X
    [4X[28X---------------------------------[128X[104X
    [4X[28X  [ 0 ]  |  6  2  2  2  2  2  7  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  7  3  4  5  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 7 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 1 ][ 1 ][ 1 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 2 letters with 7 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
    [4X[25Xgap>[125X [27XAcceptedByPredicaton(D, 100);[127X[104X
    [4X[28X[ [ 30 ] ][128X[104X
  [4X[32X[104X
  
  
  [1X4.2-6 [33X[0;0YExample 6: Theorems[133X[101X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Which of the followings sentences are true?[127X[104X
    [4X[25Xgap>[125X [27XA1:=Predicaton("(E x:(A y: x = y))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   empty_set[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is false.[128X[104X
    [4X[28X   false[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
    [4X[25Xgap>[125X [27XA2:=Predicaton("(A x:(E y: x = y))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is true.[128X[104X
    [4X[28X   true[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
    [4X[25Xgap>[125X [27XA3:=Predicaton("(A x:(E y: x = y+1))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   empty_set[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is false.[128X[104X
    [4X[28X   false[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
    [4X[25Xgap>[125X [27XA4:=Predicaton("(A x:(E y: x = 2*y) or (E y: x=2*y+1))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is true.[128X[104X
    [4X[28X   true[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
    [4X[25Xgap>[125X [27XA5:=Predicaton("(A n:(E n0: n > n0 implies (E x: (E y: 5*x+6*y=n))))");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is true.[128X[104X
    [4X[28X   true[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
    [4X[25Xgap>[125X [27X# Furthermore, we can use "true" and "false" as predicates;[127X[104X
    [4X[25Xgap>[125X [27XA6:=Predicaton("true and (false implies true) implies true");[127X[104X
    [4X[28XPredicaton: deterministic finite automaton on 1 letter with 1 state, [128X[104X
    [4X[28Xthe variable position list [ ] and the following transitions:[128X[104X
    [4X[28X       |  1  [128X[104X
    [4X[28X-------------[128X[104X
    [4X[28X  [ ]  |  1  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Due to the automaton the formula is true.[128X[104X
    [4X[28X   true[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicaton: deterministic finite automaton on 1 letter with 1 state [128X[104X
    [4X[28Xand the variable position list [ ]. >[128X[104X
  [4X[32X[104X
  
