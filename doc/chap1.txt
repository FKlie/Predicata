  
  [1X1 [33X[0;0YIntroduction[133X[101X
  
  [33X[0;0YThe  possibilities  of  the  package  [5XPredicata[105X,  a combination of the words
  predicate and automata, can be best described with the following example.[133X
  
  [33X[0;0YFor  which  natural  numbers  [23Xn[123X  does  the formula, describing the McNuggets
  numbers,[133X
  
  
  [24X[33X[0;6Y\exists x: \exists y: \exists z: 6 \cdot x+9 \cdot y+20 \cdot z=n[133X
  
  [124X
  
  [33X[0;0Yhold?  Furthermore, denoting the previous formula as [23XP[n][123X, for which natural
  number [23Xn[123X does[133X
  
  
  [24X[33X[0;6Y(\forall m: m > n \Rightarrow P[m]) \wedge \neg P[n][133X
  
  [124X
  
  [33X[0;0Yhold?[133X
  
  [33X[0;0YThe  idea is to create a deterministic finite automaton which corresponds to
  a  first-order  formula such that upon interpretation of every accepted word
  of  the  automaton  the  first-order  formula is satisfied (Automata theory:
  [HMU01], [Pip97], [Koz97]).[133X
  
  [33X[0;0YThe  main  object  type  [10XPredicaton[110X  consists of an automaton and a list and
  represents  a  first-order formula containing the nullary operations [22X0[122X and [22X1[122X
  and  the  binary  operation  [22X+[122X.  A first-order formula with [22Xn[122X different free
  variables, where each free variable is assigned to pairwise distinct natural
  numbers,  is  represented  by  an  automaton  over the alphabet [22X{0,1}^n[122X. The
  variables  are stored internally as a list of these [22Xn[122X natural numbers, where
  the  list coincides with the letters. The [22Xi[122X-th position in a letter, i.e. in
  the  [22Xn[122X-tuple,  corresponds to the variable at the [22Xi[122X-th position in the list,
  i.e.  to  the  variable  which is assigned to the natural number at the [22Xi[122X-th
  position.  Leaving  this technical details aside, the object type [2XPredicaton[102X
  ([14X4.1-3[114X)  can also be called with a mathematically more intuitive first-order
  formula,  which  internally  creates  the deterministic finite automaton and
  takes care of the variables.[133X
  
  [33X[0;0YThe  special  case  are the first-order formulas with no free variable which
  can  be  seen  as  deterministic  finite  automaton  with  one  state.  This
  deterministic  finite  automatons  can  be either interpreted as [9XTrue[109X if the
  only  state  is  a  final  state or as [9XFalse[109X otherwise. Thus this procedure,
  going  back  to J. R. B√ºchi ([B√ºc60]), decides the Presburger arithmetic (by
  Moj≈ºesz  Presburger,  1929,  [Pre29]), the first-order theory of the natural
  numbers with the operation [22X+[122X.[133X
  
  [33X[0;0YFor  first-time  users it is recommended to start with chapter [14X4[114X, especially
  to  start  with  the  examples  in  section [14X4.2[114X. The structure of the manual
  follows the structure of the package, thus the chapter [14X2[114X and [14X3[114X gives insight
  on  how  in  the  background  a  first-order  formula  is  transferred  into
  deterministic finite automaton. However this is quite lengthy and definitely
  not recommended to begin with.[133X
  
  [33X[0;0YHence it's more interesting to start with the example from above:[133X
  
  [30X    [33X[0;6YWe  start  with  [10XA:=Predicaton("(E  x:(E  y:(E z:6*x+9*y+20*z=n)))");[110X,
        consisting  of  a  deterministic  finite automaton with 17 states. The
        deterministic  finite automaton displays the alphabet on the left, the
        states  on  the  top,  the transitions as entries in the table and the
        initial and final states at the bottom.[133X
  
  [30X    [33X[0;6YFurthermore   we   can  also  display  the  [10XPredicaton[110X  anytime  with:
        [10XDisplay(A);[110X.  Additionally,  we  can  draw it with [10XDrawPredicaton(A);[110X,
        using  the  external  program  [10Xgraphviz[110X (for requirements refer to the
        manual of the package [5XAutomata[105X).[133X
  
  [30X    [33X[0;6YWe    can    also    test    for   accepted   natural   numbers   with
        [10XAcceptedByPredicaton(A, 20);[110X where the optional second parameter gives
        an   upper   bound.  [10XDisplayAcceptedByPredicaton(A,  99);[110X  prints  the
        accepted words converted into natural numbers in a nice format.[133X
  
  [30X    [33X[0;6YTo  conclude  with the example, we ask for the greatest natural number
        which      cannot      be      purchased     with     the     function
        [10XB:=GreatestNonAcceptedNumber(A);[110X          and         test         for
        [10XAcceptedWordsByPredicaton(B,  50);[110X  or  sum  up the regular expression
        [10XPredicatonToRatExp(B)[110X  (note:  here  the binary representation is read
        form behind.)[133X
  
