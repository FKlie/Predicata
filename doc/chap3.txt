  
  [1X3 [33X[0;0YParsing first-order formulas[133X[101X
  
  
  [1X3.1 [33X[0;0YPredicataFormula â€“ strings representing first-order formulas[133X[101X
  
  [1X3.1-1 PredicataFormulaSymbols[101X
  
  [33X[1;0Y[29X[2XPredicataFormulaSymbols[102X[32X global variable[133X
  
  [33X[0;0YThe variable [10XPredicataFormulaSymbols[110X stores all inbuilt function symbols.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataFormulaSymbols;[127X[104X
    [4X[28X[ "*", "+", "-", "=", "gr", "geq", "less", "leq", "and", "or", "equiv", [128X[104X
    [4X[28X"equivalent", "implies", "not", "(", ")", "[", "]", ",", ":", "A", "E" ][128X[104X
  [4X[32X[104X
  
  [1X3.1-2 PredicataIsStringType[101X
  
  [33X[1;0Y[29X[2XPredicataIsStringType[102X( [3XS[103X, [3XT[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicataIsStringType[110X  checks  if the string [3XS[103X represents one
  types   [3XT[103X[10X="variable",   "integer"   (greater  equal  0),  "negativeinteger",
  "boolean",   "predicate",   "internalpredicate",   "quantifier",   "symbol",
  "binarysymbol", "unarysymbol"[110X. [2XPredicataFormulaSymbols[102X ([14X3.1-1[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("x1", "variable");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("1", "integer");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("-1", "negativeinteger");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("true", "boolean");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("A", "quantifier");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataIsStringType("+", "symbol");[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.1-3 PredicataGrammarVerification[101X
  
  [33X[1;0Y[29X[2XPredicataGrammarVerification[102X( [3XS[103X[, [3XP[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicataGrammarVerification[110X checks if the string [3XS[103X, with the
  optional  argument  [2XPredicataRepresentation[102X  ([14X3.3-10[114X)  [3XP[103X,  is  a well-formed
  formula in the Presburger arithmetic. First a lexical analysis is performed,
  checking  if  all symbols are correct. Then it is checked if the formula can
  be  produced  from  the  predefined  grammar (see [2XPredicataGrammar[102X ([14X4.1-1[114X)).
  Finally, the range of the quantified variables is checked, as well as if all
  bounded  variables  doesn't  also  occur  as free ones. Additionally, if the
  amount  of  opening and closing parenthesis differs, a corresponding message
  is returned.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataGrammarVerification("4+x=2*y");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataGrammarVerification("(E x:3+x=2*y)");[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XPredicataGrammarVerification("= , 2 + <= x 4");[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [1X3.1-4 PredicataFormula[101X
  
  [33X[1;0Y[29X[2XPredicataFormula[102X( [3XS[103X[, [3XP[103X] ) [32X function[133X
  
  [33X[0;0YThe  function [10XPredicataFormula[110X takes a string [3XS[103X, checks if it's a formula in
  the      language      of      Presburger     arithmetic     (using     with
  [2XPredicataGrammarVerification[102X  ([14X3.1-3[114X))  and  returns a [10XPredicataFormula[110X (use
  [2XPredicataGrammar[102X ([14X4.1-1[114X) for an overview of the rules). The optional input [3XP[103X
  is  explained  at  [2XPredicataRepresentation[102X  ([14X3.3-10[114X), however on default the
  predefined variable [2XPredicataList[102X ([14X3.3-23[114X) is used.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataFormula("(E y: x + y = z)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z ) >[128X[104X
  [4X[32X[104X
  
  [1X3.1-5 IsPredicataFormula[101X
  
  [33X[1;0Y[29X[2XIsPredicataFormula[102X( [3Xf[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XIsPredicataFormula[110X checks if [3Xf[103X is a [10XPredicataFormula[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x + y = z)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z ) >[128X[104X
    [4X[25Xgap>[125X [27XIsPredicataFormula(f);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.1-6 Display[101X
  
  [33X[1;0Y[29X[2XDisplay[102X( [3Xf[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XDisplay[110X displays the [10XPredicataFormula[110X [3Xf[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(A x: (E y: x = y))");[127X[104X
    [4X[28X< PredicataFormula: ( A x : ( E y : x = y ) ) >[128X[104X
    [4X[25Xgap>[125X [27XDisplay(f);[127X[104X
    [4X[28XPredicataFormula: ( A x : ( E y : x = y ) ).[128X[104X
  [4X[32X[104X
  
  [1X3.1-7 View[101X
  
  [33X[1;0Y[29X[2XView[102X( [3Xf[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XView[110X applied on a [10XPredicataFormula[110X [3Xf[103X returns the object text.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("x + y = z");;[127X[104X
    [4X[25Xgap>[125X [27XView(f);[127X[104X
    [4X[28X< PredicataFormula: x + y = z >[128X[104X
  [4X[32X[104X
  
  [1X3.1-8 Print[101X
  
  [33X[1;0Y[29X[2XPrint[102X( [3Xf[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XPrint[110X prints the [10XPredicataFormula[110X [3Xf[103X as a string.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("x = 4 and not x = 5");[127X[104X
    [4X[28X< PredicataFormula: x = 4 and not x = 5 >[128X[104X
    [4X[25Xgap>[125X [27XPrint(f);[127X[104X
    [4X[28XPredicataFormula("x = 4 and not x = 5");[128X[104X
    [4X[25Xgap>[125X [27XString(f);[127X[104X
    [4X[28X"PredicataFormula(\"x = 4 and not x = 5\");"[128X[104X
  [4X[32X[104X
  
  [1X3.1-9 FreeVariablesOfPredicataFormula[101X
  
  [33X[1;0Y[29X[2XFreeVariablesOfPredicataFormula[102X( [3Xf[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XFreeVariablesOfPredicataFormula[110X returns the free variables of
  the [10XPredicataFormula[110X [3Xf[103X as a list of strings.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E n: 3*n = x) or (E m: 4*m = x)");[127X[104X
    [4X[28X< PredicataFormula: ( E n : 3 * n = x ) or ( E m : 4 * m = x ) >[128X[104X
    [4X[25Xgap>[125X [27XFreeVariablesOfPredicataFormula(f);[127X[104X
    [4X[28X[ "x" ][128X[104X
  [4X[32X[104X
  
  [1X3.1-10 BoundedVariablesOfPredicataFormula[101X
  
  [33X[1;0Y[29X[2XBoundedVariablesOfPredicataFormula[102X( [3Xf[103X ) [32X function[133X
  
  [33X[0;0YThe   function   [10XBoundedVariablesOfPredicataFormula[110X   returns   the  bounded
  variables of the [10XPredicataFormula[110X [3Xf[103X as a list of strings.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E n: 3*n = x) or (E m: 4*m = x)");[127X[104X
    [4X[28X< PredicataFormula: ( E n : 3 * n = x ) or ( E m : 4 * m = x ) >[128X[104X
    [4X[25Xgap>[125X [27XBoundedVariablesOfPredicataFormula(f);[127X[104X
    [4X[28X[ "n", "m" ][128X[104X
  [4X[32X[104X
  
  [1X3.1-11 PredicataFormulaFormatted[101X
  
  [33X[1;0Y[29X[2XPredicataFormulaFormatted[102X( [3Xf[103X[, [3XP[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicataFormulaFormatted[110X  adds  missing  parenthesis  to the
  [10XPredicataFormula[110X        [3Xf[103X       for       unambiguous       parsing       in
  [2XPredicataFormulaFormattedToTree[102X ([14X3.2-14[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x + y = z)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( x + y ) = z ) ) >[128X[104X
  [4X[32X[104X
  
  [1X3.1-12 IsPredicataFormulaFormatted[101X
  
  [33X[1;0Y[29X[2XIsPredicataFormulaFormatted[102X( [3Xf[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XIsPredicataFormulaFormatted[110X checks if [3Xf[103X is a [10XPredicataFormula[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x + y = z)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( x + y ) = z ) ) >[128X[104X
    [4X[25Xgap>[125X [27XIsPredicataFormulaFormatted(F);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.1-13 Display[101X
  
  [33X[1;0Y[29X[2XDisplay[102X( [3XF[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XDisplay[110X displays the [10XPredicataFormulaFormatted[110X [3XF[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(PredicataFormula("(E y: x + y = z)"));[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( x + y ) = z ) ) >[128X[104X
    [4X[25Xgap>[125X [27XDisplay(F);[127X[104X
    [4X[28XPredicataFormulaFormatted: [ "(", "E", "y", ":", "(", "(", "x", "+", "y", ")", [128X[104X
    [4X[28X"=", "z", ")", ")" ].[128X[104X
    [4X[28XConcatenation: (Ey:((x+y)=z)).[128X[104X
  [4X[32X[104X
  
  [1X3.1-14 View[101X
  
  [33X[1;0Y[29X[2XView[102X( [3Xf[103X ) [32X method[133X
  
  [33X[0;0YThe  method [10XView[110X applied on a [10XPredicataFormulaFormatted[110X [3XF[103X returns the object
  text.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("x + y = z");;[127X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);;[127X[104X
    [4X[25Xgap>[125X [27XView(F);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( ( x + y ) = z ) >[128X[104X
  [4X[32X[104X
  
  [1X3.1-15 Print[101X
  
  [33X[1;0Y[29X[2XPrint[102X( [3XF[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XPrint[110X prints the [10XPredicataFormulaFormatted[110X [3XF[103X as a string.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(PredicataFormula("x = 4 and not x = 5"));[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( ( x = 4 ) and ( not ( x = 5 ) ) ) >[128X[104X
    [4X[25Xgap>[125X [27XPrint(F);[127X[104X
    [4X[28XPredicataFormulaFormatted(PredicataFormula(s"((x=4)and(not(x=5)))"));[128X[104X
    [4X[25Xgap>[125X [27XString(F);[127X[104X
    [4X[28X"PredicataFormulaFormatted(PredicataFormula(\"((x=4)and(not(x=5)))\"));"[128X[104X
  [4X[32X[104X
  
  
  [1X3.2 [33X[0;0YPredicataTree â€“ converting first-order formulas into trees[133X[101X
  
  [1X3.2-1 PredicataTree[101X
  
  [33X[1;0Y[29X[2XPredicataTree[102X( [[3Xr[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicataTree[110X  creates  the  a tree with root [3Xr[103X, which may be
  empty.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XPredicataTree();[127X[104X
    [4X[28X< PredicataTree: [ "" ] >[128X[104X
  [4X[32X[104X
  
  [1X3.2-2 IsPredicataTree[101X
  
  [33X[1;0Y[29X[2XIsPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XIsPredicataTree[110X checks if [3Xt[103X is a [10XPredicataTree[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x + y = z)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z ) >[128X[104X
    [4X[25Xgap>[125X [27XIsPredicataFormula(f);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.2-3 Display[101X
  
  [33X[1;0Y[29X[2XDisplay[102X( [3Xt[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XDisplay[110X  prints the [10XPredicataTree[110X [3Xt[103X as a nested list, i.e. it's
  internal structure.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("only one element");[127X[104X
    [4X[28X< PredicataTree: [ "only one element" ] >[128X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "only one element" ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-4 View[101X
  
  [33X[1;0Y[29X[2XView[102X( [3Xt[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XView[110X applied on a [10XPredicataTree[110X [3Xt[103X returns the object text.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");;[127X[104X
    [4X[25Xgap>[125X [27XView(t);[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
  [4X[32X[104X
  
  [1X3.2-5 Print[101X
  
  [33X[1;0Y[29X[2XPrint[102X( [3Xt[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XPrint[110X prints the [10XPredicataTree[110X [3Xt[103X as a string.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");;[127X[104X
    [4X[25Xgap>[125X [27XPrint(t);[127X[104X
    [4X[28XPredicataTree: [ "root" ][128X[104X
  [4X[32X[104X
  
  [1X3.2-6 IsEmptyPredicataTree[101X
  
  [33X[1;0Y[29X[2XIsEmptyPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XIsEmptyPredicataTree[110X  checks  if  a  given [10XPredicataTree[110X [3Xt[103X is
  empty.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XIsEmptyPredicataTree(t);[127X[104X
    [4X[28Xfalse[128X[104X
  [4X[32X[104X
  
  [1X3.2-7 RootOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XRootOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe   function   [10XRootOfPredicataTree[110X   returns   the  current  root  of  the
  [10XPredicataTree[110X [3Xt[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("current root");[127X[104X
    [4X[28X< PredicataTree: [ "current root" ] >[128X[104X
    [4X[25Xgap>[125X [27XRootOfPredicataTree(t);[127X[104X
    [4X[28X"current root"[128X[104X
  [4X[32X[104X
  
  [1X3.2-8 SetRootOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XSetRootOfPredicataTree[102X( [3Xt[103X, [3Xn[103X ) [32X function[133X
  
  [33X[0;0YThe   function  [10XSetRootOfPredicataTree[110X  changes  the  current  root  of  the
  [10XPredicataTree[110X [3Xt[103X to the input [3Xn[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "element #2");[127X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("element #1");[127X[104X
    [4X[28X< PredicataTree: [ "element #1" ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "element #2");[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "element #2" ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-9 InsertChildToPredicataTree[101X
  
  [33X[1;0Y[29X[2XInsertChildToPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XInsertChildToPredicataTree[110X  inserts  a  child  to the current
  [10XPredicataTree[110X [3Xt[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ ] ].[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ ], [ ] ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-10 ChildOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XChildOfPredicataTree[102X( [3Xt[103X, [3Xi[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XChildOfPredicataTree"[110X  enters  the  [3Xi[103X-th child of the current
  [10XPredicataTree[110X [3Xt[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XChildOfPredicataTree(t, 1);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "child 1");[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ "child 1" ] ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-11 NumberOfChildrenOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XNumberOfChildrenOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function [10XNumberOfChildrenOfPredicataTree[110X returns the number of children
  of the current [10XPredicataTree[110X [3Xt[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XNumberOfChildrenOfPredicataTree(t);[127X[104X
    [4X[28X0[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XNumberOfChildrenOfPredicataTree(t);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XChildOfPredicataTree(t, 1);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ ], [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "child 1");[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ "child 1" ], [ ] ].[128X[104X
    [4X[25Xgap>[125X [27XNumberOfChildrenOfPredicataTree(t);[127X[104X
    [4X[28X0[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XNumberOfChildrenOfPredicataTree(t);[127X[104X
    [4X[28X2[128X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ "child 1", [ ], [ ] ], [ ] ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-12 ParentOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XParentOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XParentOfPredicataTree[110X  goes back to the parent of the current
  [10XPredicataTree[110X [3Xt[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ ], [ ] ].[128X[104X
    [4X[25Xgap>[125X [27XChildOfPredicataTree(t, 1);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ ], [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "child 1");     [127X[104X
    [4X[25Xgap>[125X [27XParentOfPredicataTree(t);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ "child 1" ], [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XChildOfPredicataTree(t, 2);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ "child 1" ], [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "child 2");[127X[104X
    [4X[25Xgap>[125X [27XDisplay(t);[127X[104X
    [4X[28XPredicataTree: [ "root", [ "child 1" ], [ "child 2" ] ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-13 ReturnedChildOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XReturnedChildOfPredicataTree[102X( [3Xt[103X, [3Xi[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XReturnedChildOfPredicataTree[110X  returns  the  [3Xi[103X-th child of the
  current [10XPredicataTree[110X [3Xt[103X as a new tree.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");[127X[104X
    [4X[28X< PredicataTree: [ "root" ] >[128X[104X
    [4X[25Xgap>[125X [27XInsertChildToPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27XChildOfPredicataTree(t, 1);[127X[104X
    [4X[28X< PredicataTree: [ "root", [ ], [ ] ] >[128X[104X
    [4X[25Xgap>[125X [27XSetRootOfPredicataTree(t, "child 1");     [127X[104X
    [4X[25Xgap>[125X [27XParentOfPredicataTree(t);[127X[104X
    [4X[25Xgap>[125X [27Xr:=ReturnedChildOfPredicataTree(t, 1);[127X[104X
    [4X[28X< PredicataTree: [ "child 1" ] >[128X[104X
  [4X[32X[104X
  
  [1X3.2-14 PredicataFormulaFormattedToTree[101X
  
  [33X[1;0Y[29X[2XPredicataFormulaFormattedToTree[102X( [3XF[103X ) [32X function[133X
  
  [33X[0;0YThe   function  [10X[110X  converts  a  [2XPredicataFormulaFormatted[102X  ([14X3.1-11[114X)  [3XF[103X  to  a
  [10XPredicataTree[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x+y=z and y = x)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z and y = x ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( ( x + y ) = z ) and ( y = x ) ) ) >[128X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataFormulaFormattedToTree(F);[127X[104X
    [4X[28X< PredicataTree: [ "E", [ "y" ], [ "and", [128X[104X
    [4X[28X[ "=", [ "+", [ "x" ], [ "y" ] ], [ "z" ] ], [ "=", [ "y" ], [ "x" ] ] ] ] >[128X[104X
    [4X[28X[128X[104X
  [4X[32X[104X
  
  [1X3.2-15 FreeVariablesOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XFreeVariablesOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function [10XFreeVariablesOfPredicataTree[110X returns the free variables of the
  [10XPredicataTree[110X  [3Xt[103X,  which  have  been  carried over from the [2XPredicataFormula[102X
  ([14X3.1-4[114X) and the [2XPredicataFormulaFormatted[102X ([14X3.1-11[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x+y=z and y = x)");[127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z and y = x ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( ( x + y ) = z ) and ( y = x ) ) ) >[128X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataFormulaFormattedToTree(F);[127X[104X
    [4X[28X< PredicataTree: [ "E", [ "y" ], [ "and", [ "=", [ "+", [ "x" ], [ "y" ] ],[128X[104X
    [4X[28X[ "z" ] ], [ "=", [ "y" ], [ "x" ] ] ] ] >[128X[104X
    [4X[25Xgap>[125X [27XFreeVariablesOfPredicataTree(t);[127X[104X
    [4X[28X[ "x", "z" ][128X[104X
  [4X[32X[104X
  
  [1X3.2-16 BoundedVariablesOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XBoundedVariablesOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XBoundedVariablesOfPredicataTree[110X returns the bounded variables
  of   the   [10XPredicataTree[110X   [3Xt[103X,   which   have  been  carried  over  from  the
  [2XPredicataFormula[102X ([14X3.1-4[114X) and the [2XPredicataFormulaFormatted[102X ([14X3.1-11[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x+y=z and y = x)"); [127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z and y = x ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( ( x + y ) = z ) and ( y = x ) ) ) >[128X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataFormulaFormattedToTree(F);[127X[104X
    [4X[28X< PredicataTree: [ "E", [ "y" ], [ "and", [ "=", [ "+", [ "x" ], [ "y" ] ], [128X[104X
    [4X[28X[ "z" ] ], [ "=", [ "y" ], [ "x" ] ] ] ] >[128X[104X
    [4X[25Xgap>[125X [27XBoundedVariablesOfPredicataTree(t);[127X[104X
    [4X[28X[ "y" ][128X[104X
  [4X[32X[104X
  
  [1X3.2-17 PredicataTreeToPredicaton[101X
  
  [33X[1;0Y[29X[2XPredicataTreeToPredicaton[102X( [3Xt[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe            function            [10XPredicataTreeToPredicaton[110X           calls
  [2XPredicataTreeToPredicatonRecursive[102X  ([14X3.2-18[114X) to turn a [2XPredicataTree[102X ([14X3.2-1[114X)
  [3Xt[103X  into  a  [2XPredicaton[102X ([14X2.1-1[114X). The optional argument [3XV[103X allows to specify an
  order for the free variables in the tree.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("(E y: x+y=z and y = x)");   [127X[104X
    [4X[28X< PredicataFormula: ( E y : x + y = z and y = x ) >[128X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(f);[127X[104X
    [4X[28X< PredicataFormulaFormatted: ( E y : ( ( ( x + y ) = z ) and ( y = x ) ) ) >[128X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataFormulaFormattedToTree(F);[127X[104X
    [4X[28X< PredicataTree: [ "E", [ "y" ], [ "and", [ "=", [ "+", [ "x" ], [ "y" ] ], [128X[104X
    [4X[28X[ "z" ] ], [ "=", [ "y" ], [ "x" ] ] ] ] >[128X[104X
    [4X[25Xgap>[125X [27XP:=PredicataTreeToPredicaton(t);[127X[104X
    [4X[28X[ "Pred", < Predicata: deterministic finite automaton on 4 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2 ]. > ][128X[104X
    [4X[25Xgap>[125X [27XDisplay(P[2]);[127X[104X
    [4X[28XPredicata: deterministic finite automaton on 4 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X Initial states: [ 2 ][128X[104X
    [4X[28X Final states:   [ 2 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "z" ].[128X[104X
  [4X[32X[104X
  
  [1X3.2-18 PredicataTreeToPredicatonRecursive[101X
  
  [33X[1;0Y[29X[2XPredicataTreeToPredicatonRecursive[102X( [3Xt[103X, [3XV[103X ) [32X function[133X
  
  [33X[0;0YThe     function    [10XPredicataTreeToPredicatonRecursive[110X    is    called    by
  [2XPredicataTreeToPredicaton[102X  ([14X3.2-17[114X)  in  order  to convert a [10XPredicataTree[110X [3Xt[103X
  into  a  [10XPredicata[110X.  The  list  [3XV[103X  contains  as  first  entry a list of free
  variables  (not necessarily occurring) and as second entry a list containing
  the  previous  variables  together with all bounded variables. This function
  goes  down into the tree recursively until it reaches its leaves. Upon going
  up  it creates the automaton of the [10XPredicaton[110X with relation to the variable
  position list.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XF:=PredicataFormulaFormatted(PredicataFormula("(E y: x+y=z and y = x)"));;[127X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataFormulaFormattedToTree(F);;[127X[104X
    [4X[25Xgap>[125X [27XP:=PredicataTreeToPredicatonRecursive(t, [[ "x", "z" ], [ "x", "y", "z" ]]);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P[2]);[127X[104X
    [4X[28XPredicata: deterministic finite automaton on 4 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 3 ] and the following transitions:[128X[104X
    [4X[28X            |  1  2  3  [128X[104X
    [4X[28X------------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 0 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X Initial states: [ 2 ][128X[104X
    [4X[28X Final states:   [ 2 ][128X[104X
  [4X[32X[104X
  
  [1X3.2-19 PredicataRepresentationOfPredicataTree[101X
  
  [33X[1;0Y[29X[2XPredicataRepresentationOfPredicataTree[102X( [3Xt[103X ) [32X function[133X
  
  [33X[0;0YThe     function    [10XPredicataRepresentationOfPredicataTree[110X    returns    the
  [10XPredicataRepresentation[110X   of   a  [10XPredicataTree[110X  [3Xt[103X.  For  more  details  see
  [2XPredicataRepresentation[102X ([14X3.3-10[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xt:=PredicataTree("root");;[127X[104X
    [4X[25Xgap>[125X [27XPredicataRepresentationOfPredicataTree(t);[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ ]. >[128X[104X
  [4X[32X[104X
  
  
  [1X3.3 [33X[0;0YPredicataRepresentation â€“ Predicata assigned with names and arities[133X[101X
  
  [33X[0;0YThis  section explains how to assign a name and an arity to a [10XPredicata[110X such
  that  it  can be reused in a [2XPredicataFormula[102X ([14X3.1-4[114X). The idea is to create
  elements  containing the name, arity and the [10XPredicata[110X and combining them in
  a  [2XPredicataRepresentation[102X  ([14X3.3-10[114X).  Additionally,  there  is a predefined
  variable  [2XPredicataList[102X ([14X3.3-23[114X), which is called by the [10XPredicataFormula[110X on
  default, trying to simplify these quite lengthy construction.[133X
  
  [1X3.3-1 PredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XPredicatonRepresentation[102X( [3Xname[103X, [3Xarity[103X, [3Xautomaton[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicatonRepresentation[110X  creates  the  representation  of  a
  Predicaton,  assigned with a [3Xname[103X, an [3Xarity[103X and an [3Xautomaton[103X (input may also
  be  a  [10XPredicaton[110X),  allowing  it to be called in a [2XPredicataFormula[102X ([14X3.1-4[114X)
  with [10XName[x1,...xN][110X (where [10XN[110X is the arity).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 3, [ [ 0, 0, 0 ], [ 1, 0, 0 ], [ 0, 1, 0 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 1, 0 ], [ 0, 0, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ] ], [127X[104X
    [4X[25X>[125X [27X[ [ 1, 3, 3 ], [ 3, 2, 3 ], [ 3, 2, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 3, 3 ], [ 1, 3, 3 ], [ 3, 2, 3 ] ], [ 1 ], [ 1 ]), [ 1, 2, 3 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("MyAdd", 3, A);[127X[104X
    [4X[28X< Predicaton represented with the name: "MyAdd", the arity: 3 [128X[104X
    [4X[28Xand the deterministic automaton on 8 letters and 3 states. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-2 IsPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XIsPredicatonRepresentation[102X( [3Xp[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XIsPredicatonRepresentation[110X  checks  if  the  argument  [3Xp[103X is a
  [10XPredicatonRepresentation[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ],[127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("EqualZero", 1, A);[127X[104X
    [4X[28X< Predicaton represented with the name "EqualZero", the arity 1 and [128X[104X
    [4X[28Xthe deterministic automaton on 2 letters and 2 states. >[128X[104X
    [4X[25Xgap>[125X [27XIsPredicatonRepresentation(p);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.3-3 Display[101X
  
  [33X[1;0Y[29X[2XDisplay[102X( [3Xp[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XDisplay[110X prints the [10XPredicatonRepresentation[110X [3Xp[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("EqualZero", 1, A);;[127X[104X
    [4X[25Xgap>[125X [27XDisplay(p);[127X[104X
    [4X[28XPredicata represented with the name: EqualZero, the arity: 1 and [128X[104X
    [4X[28Xthe following automaton: [128X[104X
    [4X[28Xdeterministic finite automaton on 2 letters with 2 states and [128X[104X
    [4X[28Xthe following transitions:[128X[104X
    [4X[28X         |  1  2  [128X[104X
    [4X[28X------------------[128X[104X
    [4X[28X  [ 0 ]  |  1  2  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
  [4X[32X[104X
  
  [1X3.3-4 View[101X
  
  [33X[1;0Y[29X[2XView[102X( [3Xp[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XView[110X applied on a [10XPredicatonRepresentation[110X [3Xp[103X returns the object
  text.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Automaton("det", 4, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ],[127X[104X
    [4X[25X>[125X [27X[ [ 1, 2, 2, 3 ], [ 2, 2, 4, 2 ], [ 2, 2, 1, 2 ], [ 3, 2, 2, 4 ] ],[127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("MultipleOfThree", 2, A);;[127X[104X
    [4X[25Xgap>[125X [27XView(p);[127X[104X
    [4X[28X< Predicaton represented with the name "MultipleOfThree", the arity 2 and [128X[104X
    [4X[28Xthe deterministic automaton on 4 letters and 4 states. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-5 Print[101X
  
  [33X[1;0Y[29X[2XPrint[102X( [3Xp[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XPrint[110X prints the [10XPredicatonRepresentation[110X [3Xp[103X as a string.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ],[127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 2 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("GreaterZero", 1, A);;[127X[104X
    [4X[25Xgap>[125X [27XPrint(p);[127X[104X
    [4X[28XPredicatonRepresentation("GreaterZero", 1, Automaton("det", 2,\[128X[104X
    [4X[28X[ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [ 1 ], [ 2 ]))[128X[104X
    [4X[25Xgap>[125X [27XString(p);[127X[104X
    [4X[28X"PredicatonRepresentation(\"GreaterZero\", 1, Automaton(\"det\", 2,\[128X[104X
    [4X[28X[ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [ 1 ], [ 2 ]))"[128X[104X
  [4X[32X[104X
  
  [1X3.3-6 NameOfPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XNameOfPredicatonRepresentation[102X( [3Xp[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XNameOfPredicatonRepresentation[110X returns the [10Xname[110X of [3Xp[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 4, [ [ 0 ], [ 1 ] ], [ [ 4, 2, 3, 3 ],[127X[104X
    [4X[25X>[125X [27X[ 3, 3, 3, 2 ] ], [ 1 ], [ 3, 4, 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("NotTwo", 1, A);;[127X[104X
    [4X[25Xgap>[125X [27XNameOfPredicatonRepresentation(p);[127X[104X
    [4X[28X"NotTwo"[128X[104X
  [4X[32X[104X
  
  [1X3.3-7 ArityOfPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XArityOfPredicatonRepresentation[102X( [3Xp[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XArityOfPredicatonRepresentation[110X returns the [10Xarity[110X of [3Xp[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 4, [ [ 0 ], [ 1 ] ], [ [ 4, 2, 3, 3 ],[127X[104X
    [4X[25X>[125X [27X[ 3, 3, 3, 2 ] ], [ 1 ], [ 3, 4, 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("NotTwo", 1, A);;[127X[104X
    [4X[25Xgap>[125X [27XArityOfPredicatonRepresentation(p);[127X[104X
    [4X[28X1[128X[104X
  [4X[32X[104X
  
  [1X3.3-8 AutOfPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XAutOfPredicatonRepresentation[102X( [3Xp[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XAutOfPredicatonRepresentation[110X returns the [10Xautomaton[110X of [3Xp[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 4, [ [ 0 ], [ 1 ] ], [ [ 4, 2, 3, 3 ],[127X[104X
    [4X[25X>[125X [27X[ 3, 3, 3, 2 ] ], [ 1 ], [ 3, 4, 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("NotTwo", 1, A);;[127X[104X
    [4X[25Xgap>[125X [27XAutOfPredicatonRepresentation(p);[127X[104X
    [4X[28X< deterministic automaton on 2 letters with 4 states >[128X[104X
  [4X[32X[104X
  
  [1X3.3-9 CopyPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XCopyPredicatonRepresentation[102X( [3Xp[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XCopyPredicatonRepresentation[110X copies [3Xp[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Automaton("det", 3, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ],[127X[104X
    [4X[25X>[125X [27X[ [ 1, 3, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [ 3, 2, 3 ] ], [ 1 ], [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("CopyPred", 2, A);;[127X[104X
    [4X[25Xgap>[125X [27Xq:=CopyPredicatonRepresentation(p);[127X[104X
    [4X[28X< Predicaton represented with the name "CopyPred", the arity 2 and [128X[104X
    [4X[28Xthe deterministic automaton on 4 letters and 3 states. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-10 PredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XPredicataRepresentation[102X( [[3Xl[103X] ) [32X function[133X
  
  [33X[0;0YThe  function  [10XPredicataRepresentation[110X  creates  a  collection  of  elements
  ([2XPredicatonRepresentation[102X  ([14X3.3-1[114X)),  where the list [3Xl[103X may contain arbitrary
  many  of  them.  The  [10XPredicataRepresentation[110X  is  an optional input for the
  function  [2XPredicataFormula[102X  ([14X3.1-4[114X)  (On  default  it  uses  the  predefined
  variable  [2XPredicataList[102X  ([14X3.3-23[114X)).  Note  that the variables must be unique
  within one predicate call.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA1:=Predicaton(Automaton("det", 3, [ [ 0, 0, 0 ], [ 1, 0, 0 ], [ 0, 1, 0 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 1, 0 ], [ 0, 0, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ] ], [127X[104X
    [4X[25X>[125X [27X[ [ 1, 3, 3 ], [ 3, 2, 3 ], [ 3, 2, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 3, 3 ], [ 1, 3, 3 ], [ 3, 2, 3 ] ], [ 1 ], [ 1 ]), [ 1, 2, 3 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp1:=PredicatonRepresentation("MyAdd", 3, A1);[127X[104X
    [4X[28X< Predicaton represented with the name "MyAdd", the arity 3 and [128X[104X
    [4X[28Xthe deterministic automaton on 8 letters and 3 states. >[128X[104X
    [4X[25Xgap>[125X [27XA2:=Predicaton(Automaton("det", 2, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ],[127X[104X
    [4X[25X>[125X [27X[ [ 1, 2 ], [ 2, 2 ], [ 2, 2 ], [ 1, 2 ] ], [ 1 ], [ 1 ]), [ 1, 2 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp2:=PredicatonRepresentation("MyEqual", 2, A2);;[127X[104X
    [4X[25Xgap>[125X [27XP:=PredicataRepresentation(p1, p2);[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [128X[104X
    [4X[28X[ "MyEqual", "MyAdd"]. >[128X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("MyAdd[x,y,z] and MyEqual[x,y]", P);[127X[104X
    [4X[28X< PredicataFormula: MyAdd [ x , y , z ] and MyEqual [ x , y ] >[128X[104X
  [4X[32X[104X
  
  [1X3.3-11 IsPredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XIsPredicataRepresentation[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XIsPredicataRepresentation[110X  checks  if  the  argument  [3XP[103X  is a
  [10XPredicataRepresentation[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XIsPredicataRepresentation(P);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [1X3.3-12 Display[101X
  
  [33X[1;0Y[29X[2XDisplay[102X( [3Xp[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XDisplay[110X prints the [10XPredicataRepresentation[110X [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XDisplay(P);[127X[104X
    [4X[28XPredicata representation containing the following PredicatonRepresentations:[128X[104X
    [4X[28XPredicata represented with the name: MyEqual, the arity: 2 and [128X[104X
    [4X[28Xthe following automaton:[128X[104X
    [4X[28Xdeterministic finite automaton on 4 letters with 2 states and [128X[104X
    [4X[28Xthe following transitions:[128X[104X
    [4X[28X            |  1  2  [128X[104X
    [4X[28X---------------------[128X[104X
    [4X[28X  [ 0, 0 ]  |  1  2  [128X[104X
    [4X[28X  [ 1, 0 ]  |  2  2  [128X[104X
    [4X[28X  [ 0, 1 ]  |  2  2  [128X[104X
    [4X[28X  [ 1, 1 ]  |  1  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28XPredicata represented with the name: MyAdd, the arity: 3 and [128X[104X
    [4X[28Xthe following automaton:[128X[104X
    [4X[28Xdeterministic finite automaton on 8 letters with 3 states and [128X[104X
    [4X[28Xthe following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
  [4X[32X[104X
  
  [1X3.3-13 View[101X
  
  [33X[1;0Y[29X[2XView[102X( [3XP[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XView[110X  applied on a [10XPredicataRepresentation[110X [3XP[103X returns the object
  text.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XP:=PredicataRepresentation();;[127X[104X
    [4X[25Xgap>[125X [27XView(P);[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-14 Print[101X
  
  [33X[1;0Y[29X[2XPrint[102X( [3XP[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XPrint[110X prints the [10XPredicataRepresentation[110X [3XP[103X as a string.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XPrint(P);[127X[104X
    [4X[28XPredicataRepresentation(PredicatonRepresentation("MyEqual", 2, Automaton\[128X[104X
    [4X[28X("det", 2, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ], [ [ 1, 2 ], [ 2, 2 ], [\[128X[104X
    [4X[28X 2, 2 ], [ 1, 2 ] ], [ 1 ], [ 1 ])), PredicatonRepresentation("MyAdd", 3\[128X[104X
    [4X[28X, Automaton("det", 3, [ [ 0, 0, 0 ], [ 1, 0, 0 ], [ 0, 1, 0 ], [ 1, 1, 0 ], [ \[128X[104X
    [4X[28X0, 0, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ] ], [ [ 1, 3, 3 ], [ 3, 2, 3 ]\[128X[104X
    [4X[28X, [ 3, 2, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [ 1, 3, 3 ], [ 1, 3, 3 ], [ 3, 2, 3 ]\[128X[104X
    [4X[28X ], [ 1 ], [ 1 ])))[128X[104X
    [4X[25Xgap>[125X [27XString(P);[127X[104X
    [4X[28X"PredicataRepresentation(PredicatonRepresentation(\"MyEqual\", 2, Automa\[128X[104X
    [4X[28Xton(\"det\", 2, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ], [ [ 1, 2 ], [ 2, 2\[128X[104X
    [4X[28X ], [ 2, 2 ], [ 1, 2 ] ], [ 1 ], [ 1 ])), PredicatonRepresentation(\"MyA\[128X[104X
    [4X[28Xdd\", 3, Automaton(\"det\", 3, [ [ 0, 0, 0 ], [ 1, 0, 0 ], [ 0, 1, 0 ], [ 1, 1\[128X[104X
    [4X[28X, 0 ], [ 0, 0, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ] ], [ [ 1, 3, 3 ], [ \[128X[104X
    [4X[28X3, 2, 3 ], [ 3, 2, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [ 1, 3, 3 ], [ 1, 3, 3 ], [ \[128X[104X
    [4X[28X3, 2, 3 ] ], [ 1 ], [ 1 ])), PredicatonRepresentation(\"GreaterZero\", 1\[128X[104X
    [4X[28X, Automaton(\"det\", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [ 1 ], [ 2 ]\[128X[104X
    [4X[28X)))"[128X[104X
  [4X[32X[104X
  
  [1X3.3-15 NamesOfPredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XNamesOfPredicataRepresentation[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XNamesOfPredicataRepresentation[110X returns the names of [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XNamesOfPredicataRepresentation(P);[127X[104X
    [4X[28X[ "MyEqual", "MyAdd" ][128X[104X
  [4X[32X[104X
  
  [1X3.3-16 AritiesOfPredicatonRepresentation[101X
  
  [33X[1;0Y[29X[2XAritiesOfPredicatonRepresentation[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XAritiesOfPredicatonRepresentation[110X returns the arities of [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XAritiesOfPredicataRepresentation(P);[127X[104X
    [4X[28X[ 2, 3 ][128X[104X
  [4X[32X[104X
  
  [1X3.3-17 AutsOfPredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XAutsOfPredicataRepresentation[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe function [10XAutOfPredicataRepresentation[110X returns the automaton of [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XAutsOfPredicataRepresentation(P);[127X[104X
    [4X[28X[ < deterministic automaton on 4 letters with 2 states >, [128X[104X
    [4X[28X  < deterministic automaton on 8 letters with 3 states > ][128X[104X
  [4X[32X[104X
  
  [1X3.3-18 ElementOfPredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XElementOfPredicataRepresentation[102X( [3XP[103X, [3Xi[103X ) [32X function[133X
  
  [33X[0;0YThe  function [10XElementOfPredicataRepresentation[110X returns the [3Xi[103X-th element as a
  [2XPredicatonRepresentation[102X ([14X3.3-1[114X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XElementOfPredicataRepresentation(P, 1);[127X[104X
    [4X[28X< Predicaton represented with the name "MyEqual", the arity 2 and [128X[104X
    [4X[28Xthe deterministic automaton on 4 letters and 2 states. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-19 Add[101X
  
  [33X[1;0Y[29X[2XAdd[102X( [3XP[103X, [3Xp[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XAdd[110X adds the [10XPredicatonRepresentation[110X [3Xp[103X to [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XA3:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 2 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp3:=PredicatonRepresentation("GreaterZero", 1, A3);;[127X[104X
    [4X[25Xgap>[125X [27XAdd(P, p3);[127X[104X
    [4X[25Xgap>[125X [27XP;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [128X[104X
    [4X[28X[ "MyEqual", "MyAdd", "GreaterZero" ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-20 Add[101X
  
  [33X[1;0Y[29X[2XAdd[102X( [3XP[103X, [3Xname[103X, [3Xarity[103X, [3Xautomaton[103X ) [32X method[133X
  
  [33X[0;0YThe  method  [10XAdd[110X  adds the [10XPredicatonRepresentation[110X created from [3Xname[103X, [3Xarity[103X
  and [3Xautomaton[103X to [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataRepresentation[127X[104X
    [4X[25Xgap>[125X [27XA4:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27XAdd(P, "EqualZero", 1, A4);[127X[104X
    [4X[25Xgap>[125X [27XP;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [128X[104X
    [4X[28X[ "MyEqual", "MyAdd", "GreaterZero", "EqualZero" ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-21 Remove[101X
  
  [33X[1;0Y[29X[2XRemove[102X( [3XP[103X, [3Xi[103X ) [32X method[133X
  
  [33X[0;0YThe method [10XRemove[110X removes the [3Xi[103X-th element of [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA5:=Predicaton(Automaton("det", 4, [ [ 0 ], [ 1 ] ], [ [ 4, 2, 3, 3 ],[127X[104X
    [4X[25X>[125X [27X[ 3, 3, 3, 2 ] ], [ 1 ], [ 3, 4, 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp5:=PredicatonRepresentation("NotTwo", 1, A5);;[127X[104X
    [4X[25Xgap>[125X [27XAdd(P, p5);[127X[104X
    [4X[25Xgap>[125X [27XP;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [128X[104X
    [4X[28X[ "NotTwo", "MyEqual", "MyAdd", "GreaterZero", "EqualZero" ]. >[128X[104X
    [4X[25Xgap>[125X [27XRemove(P, 1);[127X[104X
    [4X[28X< Predicaton represented with the name "NotTwo", the arity 1 and [128X[104X
    [4X[28Xthe deterministic automaton on 2 letters and 4 states. >[128X[104X
    [4X[25Xgap>[125X [27XP;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [128X[104X
    [4X[28X[ "MyEqual", "MyAdd", "GreaterZero", "EqualZero" ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-22 CopyPredicataRepresentation[101X
  
  [33X[1;0Y[29X[2XCopyPredicataRepresentation[102X( [3XP[103X ) [32X function[133X
  
  [33X[0;0YThe  function [10XCopyPredicataRepresentation[110X copies the [10XPredicataRepresentation[110X
  [3XP[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Automaton("det", 3, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ],[127X[104X
    [4X[25X>[125X [27X[ [ 1, 3, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [ 3, 2, 3 ] ], [ 1 ], [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp:=PredicatonRepresentation("CopyPred", 2, A);;[127X[104X
    [4X[25Xgap>[125X [27XP:=PredicataRepresentation(p);[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ "CopyPred" ]. >[128X[104X
    [4X[25Xgap>[125X [27XQ:=CopyPredicataRepresentation(P);[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ "CopyPred" ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-23 PredicataList[101X
  
  [33X[1;0Y[29X[2XPredicataList[102X[32X global variable[133X
  
  [33X[0;0YThe  variable  [10XPredicataList[110X  is a [2XPredicataRepresentation[102X ([14X3.3-10[114X) which is
  called  on  default  by  the  [2XPredicataFormula[102X  ([14X3.1-4[114X).  Together  with the
  functions  [2XAddToPredicataList[102X  ([14X3.3-24[114X) and [2XRemoveFromPredicataList[102X ([14X3.3-26[114X)
  the  intention  is  to  be  able to use own predicates without specifying to
  much.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [  ]. >[128X[104X
    [4X[25Xgap>[125X [27XA1:=Predicaton(Automaton("det", 3, [ [ 0, 0, 0 ], [ 1, 0, 0 ], [ 0, 1, 0 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 1, 0 ], [ 0, 0, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ], [ 1, 1, 1 ] ], [127X[104X
    [4X[25X>[125X [27X[ [ 1, 3, 3 ], [ 3, 2, 3 ], [ 3, 2, 3 ], [ 2, 3, 3 ], [ 3, 1, 3 ], [127X[104X
    [4X[25X>[125X [27X[ 1, 3, 3 ], [ 1, 3, 3 ], [ 3, 2, 3 ] ], [ 1 ], [ 1 ]), [ 1, 2, 3 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp1:=PredicatonRepresentation("MyAdd", 3, A1);;[127X[104X
    [4X[25Xgap>[125X [27XAdd(PredicataList, p1);[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ "MyAdd" ]. >[128X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("MyAdd[x,y,z]");[127X[104X
    [4X[28X< PredicataFormula: MyAdd [ x , y , z ] >[128X[104X
  [4X[32X[104X
  
  [1X3.3-24 AddToPredicataList[101X
  
  [33X[1;0Y[29X[2XAddToPredicataList[102X( [3Xp[103X[, [3Xarity[103X, [3Xautomaton[103X] ) [32X function[133X
  
  [33X[0;0YThe  function [10XAddToPredicataList[110X adds either a [10XPredicatonRepresentation[110X [3Xp[103X or
  the  created  one  with [3Xp[103X being a string ([10Xname[110X) as well as the [3Xarity[103X and the
  [3Xautomaton[103X to [10XPredicataList[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataList[127X[104X
    [4X[25Xgap>[125X [27XA2:=Predicaton(Automaton("det", 2, [ [ 0, 0 ], [ 1, 0 ], [ 0, 1 ], [ 1, 1 ] ],[127X[104X
    [4X[25X>[125X [27X[ [ 1, 2 ], [ 2, 2 ], [ 2, 2 ], [ 1, 2 ] ], [ 1 ], [ 1 ]), [ 1, 2 ]);;[127X[104X
    [4X[25Xgap>[125X [27Xp2:=PredicatonRepresentation("MyEqual", 2, A2);;[127X[104X
    [4X[25Xgap>[125X [27XAddToPredicataList(p2);[127X[104X
    [4X[25Xgap>[125X [27XA3:=Predicaton(Automaton("det", 2, [ [ 0 ], [ 1 ] ], [ [ 1, 2 ], [ 2, 2 ] ], [127X[104X
    [4X[25X>[125X [27X[ 1 ], [ 2 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27XAddToPredicataList("GreaterZero", 1, A3);[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("MyAdd[x,y,z] and MyEqual[x,y]");[127X[104X
    [4X[28X< PredicataFormula: MyAdd [ x , y , z ] and MyEqual [ x , y ] >[128X[104X
  [4X[32X[104X
  
  [1X3.3-25 ClearPredicataList[101X
  
  [33X[1;0Y[29X[2XClearPredicataList[102X(  ) [32X function[133X
  
  [33X[0;0YThe function [10XClearPredicataList[110X clears the [10XPredicataList[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27X# Continued example: PredicataList[127X[104X
    [4X[25Xgap>[125X [27XClearPredicataList();[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.3-26 RemoveFromPredicataList[101X
  
  [33X[1;0Y[29X[2XRemoveFromPredicataList[102X( [3Xi[103X ) [32X function[133X
  
  [33X[0;0YThe  function  [10XRemoveFromPredicataList[110X  removes  the  [3Xi[103X-th  element  of  the
  [10XPredicataList[110X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=Predicaton(Automaton("det", 4, [ [ 0 ], [ 1 ] ], [ [ 4, 2, 3, 3 ],[127X[104X
    [4X[25X>[125X [27X[ 3, 3, 3, 2 ] ], [ 1 ], [ 3, 4, 1 ]), [ 1 ]);;[127X[104X
    [4X[25Xgap>[125X [27XAddToPredicataList("NotTwo", 1, A);[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ "NotTwo" ]. >[128X[104X
    [4X[25Xgap>[125X [27XRemoveFromPredicataList(1);[127X[104X
    [4X[25Xgap>[125X [27XPredicataList;[127X[104X
    [4X[28X< PredicataRepresentation containing the following predicates: [ ]. >[128X[104X
  [4X[32X[104X
  
  
  [1X3.4 [33X[0;0YConverting PredicataFormulas via PredicataTrees into Predicata[133X[101X
  
  [1X3.4-1 PredicataFormulaToPredicaton[101X
  
  [33X[1;0Y[29X[2XPredicataFormulaToPredicaton[102X( [3Xf[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe function [10XPredicataFormulaToPredicaton[110X takes a [2XPredicataFormula[102X ([14X3.1-4[114X) [3Xf[103X
  and  returns  a [10XPredicata[110X which language recognizes the solutions of formula
  [3Xf[103X.  The  input  [3Xf[103X  must  be  a first-order formula containing the operations
  addition[22X+[122X   and   the   constant  multiplication  [22X*[122X  (as  a  shortcut),  see
  [2XPredicataGrammar[102X ([14X4.1-1[114X). The optional parameter [3XV[103X (list containing strings)
  allows  to  set an order of the free variables occurring in [3Xf[103X. Note that the
  variables  must  not necessarily occur in the formula (for example [10Xx = 4[110X and
  [10XV:=["x","y"][110X).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xf:=PredicataFormula("x = 4");[127X[104X
    [4X[28X< PredicataFormula: x = 4 >[128X[104X
    [4X[25Xgap>[125X [27XA:=PredicataFormulaToPredicaton(f);[127X[104X
    [4X[28XPredicata: deterministic finite automaton on 2 letters with 5 states, [128X[104X
    [4X[28Xthe variable position list [ 1 ] and the following transitions:[128X[104X
    [4X[28X         |  1  2  3  4  5  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0 ]  |  4  2  2  3  5  [128X[104X
    [4X[28X  [ 1 ]  |  2  2  5  2  2  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 5 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   [ 0 ][ 0 ][ 1 ][ 0 ]*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicata: deterministic finite automaton on 2 letters with 5 states [128X[104X
    [4X[28Xand the variable position list [ 1 ]. >[128X[104X
  [4X[32X[104X
  
  [1X3.4-2 StringToPredicaton[101X
  
  [33X[1;0Y[29X[2XStringToPredicaton[102X( [3Xf[103X[, [3XV[103X] ) [32X function[133X
  
  [33X[0;0YThe    function    [10XStringToPredicaton[110X    is    the    simpler   version   of
  [2XPredicataFormulaToPredicaton[102X ([14X3.4-1[114X), it takes an [10XString[110X [3Xf[103X, converts it to a
  [10XPredicataFormula[110X and returns a [10XPredicata[110X. The optional parameter [3XV[103X allows to
  set an order for the variables.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XA:=StringToPredicaton("x+y = z");[127X[104X
    [4X[28XPredicata: deterministic finite automaton on 8 letters with 3 states, [128X[104X
    [4X[28Xthe variable position list [ 1, 2, 3 ] and the following transitions:[128X[104X
    [4X[28X               |  1  2  3  [128X[104X
    [4X[28X---------------------------[128X[104X
    [4X[28X  [ 0, 0, 0 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 0, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 0, 1, 0 ]  |  3  2  3  [128X[104X
    [4X[28X  [ 1, 1, 0 ]  |  2  3  3  [128X[104X
    [4X[28X  [ 0, 0, 1 ]  |  3  1  3  [128X[104X
    [4X[28X  [ 1, 0, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 0, 1, 1 ]  |  1  3  3  [128X[104X
    [4X[28X  [ 1, 1, 1 ]  |  3  2  3  [128X[104X
    [4X[28X Initial states: [ 1 ][128X[104X
    [4X[28X Final states:   [ 1 ][128X[104X
    [4X[28X[128X[104X
    [4X[28X The alphabet corresponds to the following variable list: [ "x", "y", "z" ].[128X[104X
    [4X[28X[128X[104X
    [4X[28X Regular expression of the automaton:[128X[104X
    [4X[28X   ([ 1, 1, 0 ]([ 1, 0, 0 ]U[ 0, 1, 0 ]U[ 1, 1, 1 ])*[128X[104X
    [4X[28X   [ 0, 0, 1 ]U[ 0, 0, 0 ]U[ 1, 0, 1 ]U[ 0, 1, 1 ])*[128X[104X
    [4X[28X[128X[104X
    [4X[28X Output:[128X[104X
    [4X[28X< Predicata: deterministic finite automaton on 8 letters with 3 states [128X[104X
    [4X[28Xand the variable position list [ 1, 2, 3 ]. >[128X[104X
  [4X[32X[104X
  
