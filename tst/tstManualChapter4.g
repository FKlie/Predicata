Print("\nReading tstManualChapter4.g\n");
PredicataGrammar();
f:=PredicataFormula("2*x = y");
Predicaton(f);
f:=PredicataFormula("2*x = y");
Predicaton(f, [ "y", "x" ]);
Predicaton("(E y: x+y = z and x = y)");
Predicaton("(E y: x+y = z and x = y)", [ "z", "x" ]);
P:=Predicaton("u3+2 = z5");
VariableListOfPredicaton(P);
P:=Predicaton("x+y = z");
SetVariableListOfPredicaton(P, [ "z", "y", "x" ]);
Display(P);
P:=Predicaton("x+y = z");
Q:=VariableAdjustedPredicaton(P, [ "z", "y", "x" ]);;
Display(Q);
P1:=Predicaton("x+y = z");;
P2:=Predicaton("y = 4");;
L:=VariableAdjustedPredicata(P1,P2, [ "x", "z", "y"]);
VariableListOfPredicaton(L[1]);
VariableListOfPredicaton(L[2]);
P1:=Predicaton("x+y = z");
P2:=Predicaton("y = 4");
P:=AndPredicata(P1, P2, [ "x", "y", "z"]);;
Display(P);
Q:=Predicaton("x+y = z and y = 4", [ "x", "y", "z"]);
P1:=Predicaton("u = 4");
P2:=Predicaton("u = 2");
P:=OrPredicata(P1, P2);;
Display(P);
P:=Predicaton("x < 4");
NotPredicaton(P);;
Display(P);
P1:=Predicaton("(E m: x = 4*m)");
P2:=Predicaton("(E n: x = 2*n)");
P:=ImpliesPredicata(P1, P2, [ "x" ]);;
Display(P);
P1:=Predicaton("(E y: 2*x = 7+3*y)");
P2:=Predicaton("(E k: x = 5+3*k)");
P:=EquivalentPredicata(P1, P2);;
Display(P);
P:=Predicaton("5*x+6*y = n");
P:=ExistsPredicaton(P, "x");;
P:=ExistsPredicaton(P, "y");;
Display(P);
P1:=Predicaton("(E x: (E y: 5*x+6*y = n))");
P2:=Predicaton("n > 19");
P3:=ImpliesPredicata(P2, P1);;
P:=ForallPredicaton(P3, "n");;
Display(P);
P:=Predicaton("x >= 4");
L:=LeastAcceptedNumber(P);
P:=Predicaton("(E x: 2*x = y and x < 9)");
G:=GreatestAcceptedNumber(P);
P:=Predicaton("x < 4 or x  8");
L:=LeastNonAcceptedNumber(P);
P:=Predicaton("(E x: (E y: 3*x + 4*y = n))");
G:=GreatestNonAcceptedNumber(P);
AcceptedByPredicaton(G);
P:=Predicaton("(A x: (E y: x = y))");
InterpretedPredicaton(P);
P1:=Predicaton("x=4", ["x", "y"]);
P2:=Predicaton("u=4", ["u", "v", "w"]);
AreEquivalentPredicata(P1, P2);
AreEquivalentPredicata(P1, P2, false);
A:=LinearSolveOverN([ [ 1, -2, 3 ], [ 3, 4, -7 ] ], [ 2, 0 ]);
AcceptedByPredicaton(A, 10);
N:=NullSpaceOverN([[1, -2, 3],[3, 4, -7]]);
AcceptedByPredicaton(N);
DecToBin(4);
A:=Predicaton("x = 4");
IsAcceptedByPredicaton(A, [ 4 ]);
IsAcceptedByPredicaton(A, [ [ 0, 0, 1 ] ]);
IsAcceptedByPredicaton(A, [ [ 0, 0, 1, 0 ] ]);
PredicatonToRatExp(A);
Aut:=Automaton("det", 3,     [ [ 0 ], [ 1 ] ],
  [ [ 3, 2, 3 ], [ 2, 3, 3 ] ],
  [ 1 ],          [ 2 ]);
B:=Predicaton(Aut, [ 2 ]); 
SetVariableListOfPredicaton(B, [ "y" ]); 
C:=AndPredicata(A, B, [ "x", "y" ]);;
Display(C);
IsAcceptedByPredicaton(C, [ 4, 1 ]);
IsAcceptedByPredicaton(C, [ [ 0, 0, 1 ], [ 1 ] ]);
D:=Predicaton("x = 4 and y = 1");
PredicataGrammar();
A:=Predicaton("(E x:(E y:(E z:6*x+9*y+20*z=n)))");
Display(A);
AcceptedByPredicaton(A, 20);
DisplayAcceptedByPredicaton(A, 99, true);
p:=PredicatonRepresentation("P", 1, A);
AddToPredicataList(p);
PredicataList;
B:=Predicaton("(A m: m > n implies P[m]) and not P[n]");
AcceptedByPredicaton(B, 50);
PredicatonToRatExp(B);
BinToDec([ 1, 1, 0, 1, 0, 1 ]);
C:=GreatestNonAcceptedNumber(A);
A:=Predicaton("(E y: 3*y = x)");
B:=Predicaton("3*y = x");
Display(B);
C:=ExistsPredicaton(B, "y");;
Display(C);
A:=Predicaton("(E y: 4*x = 7+5*y)");
AcceptedByPredicaton(A, 20);
B:=Predicaton("(E k: x = 3+5*k)");
AreEquivalentPredicata(A, B);
C:=Predicaton("(E y1: x = 1 + 2*y1) and (E y2: x = 2 + 3*y2)");
AcceptedByPredicaton(C, 20);
D:=Predicaton("(E k: x = 5 + 6 * k)");
AreEquivalentPredicata(C, D);
A:=Predicaton("(E y: (A z: z=y implies ((Ea : (Eb: z= 6*a+15*b))\
 implies (Ec: (Ed: z+x= 6*c+15*d)))))");
B:=LeastAcceptedNumber(A);
AcceptedByPredicaton(B);
C:=Predicaton("(E a: 6*a = x) and (E b: 15*b = x)");
D:=LeastAcceptedNumber(C);
AcceptedByPredicaton(D, 100);
A1:=Predicaton("(E x:(A y: x = y))");
A2:=Predicaton("(A x:(E y: x = y))");
A3:=Predicaton("(A x:(E y: x = y+1))");
A4:=Predicaton("(A x:(E y: x = 2*y) or (E y: x=2*y+1))");
A5:=Predicaton("(A n:(E n0: n  n0 implies (E x: (E y: 5*x+6*y=n))))");
A6:=Predicaton("true and (false implies true) implies true");
Print("\nFinished tstManualChapter4.g\n");